{
    "CLASS_DECL": [
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "CLASS_DECL",
            "line": 48,
            "line_tokens": [
                "class",
                "LexNode",
                "{",
                "private",
                ":",
                "/**\n   * The ros server for lex requests.\n   */",
                "ros",
                "::",
                "ServiceServer",
                "lex_server_",
                ";",
                "/**\n   * The Lex specific configuration for the amazon bot.\n   */",
                "LexConfiguration",
                "lex_configuration_",
                ";",
                "/**\n   * The lex runtime client to use for lex api calls.\n   */",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "lex_runtime_client_",
                ";",
                "/**\n   * The ros node handle.\n   */",
                "ros",
                "::",
                "NodeHandle",
                "node_handle_",
                ";",
                "public",
                ":",
                "/**\n   * Constructor.\n   */",
                "LexNode",
                "(",
                ")",
                ";",
                "/**\n   * Destructor.\n   */",
                "~",
                "LexNode",
                "(",
                ")",
                "=",
                "default",
                ";",
                "/**\n   * Initialize the lex node.\n   */",
                "void",
                "Init",
                "(",
                ")",
                ";",
                "/**\n   * Query if the service is in a valid state or not\n   */",
                "bool",
                "IsServiceValid",
                "(",
                ")",
                "{",
                "return",
                "(",
                "nullptr",
                "!=",
                "static_cast",
                "<",
                "void",
                "*",
                ">",
                "(",
                "lex_server_",
                ")",
                ")",
                ";",
                "}",
                "/**\n   * Service callback for lex. Only allow one interaction with Lex at a time. If a new request comes\n   * in, fail the last request, then make a new request.\n   *\n   * @param request to handle\n   * @param response to fill\n   * @return true if the service request was successful\n   */",
                "bool",
                "LexServerCallback",
                "(",
                "lex_common_msgs",
                "::",
                "AudioTextConversationRequest",
                "&",
                "request",
                ",",
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response",
                ")",
                ";",
                "/**\n   * Configure the lex node with lex client and config.\n   *\n   * @param lex_configuration message tags for lex calls\n   * @param lex_runtime_client to call lex\n   */",
                "void",
                "ConfigureAwsLex",
                "(",
                "LexConfiguration",
                "&",
                "lex_configuration",
                ",",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "lex_runtime_client",
                ")",
                ";",
                "/**\n   * Return pointer to the Lex runtime client instance of this node\n   *\n   * @return pointer this node's Lex runtime client instance\n   */",
                "std",
                "::",
                "weak_ptr",
                "<",
                "const",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "GetLexRuntimeClient",
                "(",
                ")",
                "const",
                "{",
                "return",
                "lex_runtime_client_",
                ";",
                "}",
                "/**\n   * Conversion function since in ROS2, this class will inherit from Node.\n   *\n   * @return this functions node handle.\n   */",
                "explicit",
                "operator",
                "ros",
                "::",
                "NodeHandle",
                "&",
                "(",
                ")",
                "{",
                "return",
                "node_handle_",
                ";",
                "}",
                "}"
            ],
            "name": "LexNode",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "CLASS_DECL",
            "line": 34,
            "line_tokens": [
                "class",
                "LexNode"
            ],
            "name": "LexNode",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 14,
            "token_start_col": 1,
            "var_type": "Aws::Lex::LexNode"
        }
    ],
    "CONSTRUCTOR": [
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "CONSTRUCTOR",
            "line": 75,
            "line_tokens": [
                "LexNode",
                "(",
                ")"
            ],
            "name": "LexNode",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 12,
            "token_start_col": 3,
            "var_type": "void ()"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "CONSTRUCTOR",
            "line": 183,
            "line_tokens": [
                "LexNode",
                "::",
                "LexNode",
                "(",
                ")",
                ":",
                "node_handle_",
                "(",
                "\"~\"",
                ")",
                "{",
                "}"
            ],
            "name": "LexNode",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 42,
            "token_start_col": 1,
            "var_type": "void ()"
        }
    ],
    "CXX_METHOD": [
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "CXX_METHOD",
            "line": 118,
            "line_tokens": [
                "std",
                "::",
                "weak_ptr",
                "<",
                "const",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "GetLexRuntimeClient",
                "(",
                ")",
                "const",
                "{",
                "return",
                "lex_runtime_client_",
                ";",
                "}"
            ],
            "name": "GetLexRuntimeClient",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 4,
            "token_start_col": 3,
            "var_type": "std::weak_ptr<const Aws::LexRuntimeService::LexRuntimeServiceClient> () const"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "CXX_METHOD",
            "line": 109,
            "line_tokens": [
                "void",
                "ConfigureAwsLex",
                "(",
                "LexConfiguration",
                "&",
                "lex_configuration",
                ",",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "lex_runtime_client",
                ")"
            ],
            "name": "ConfigureAwsLex",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 89,
            "token_start_col": 3,
            "var_type": "void (Aws::Lex::LexConfiguration &, std::shared_ptr<Aws::LexRuntimeService::LexRuntimeServiceClient>)"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "CXX_METHOD",
            "line": 100,
            "line_tokens": [
                "bool",
                "LexServerCallback",
                "(",
                "lex_common_msgs",
                "::",
                "AudioTextConversationRequest",
                "&",
                "request",
                ",",
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response",
                ")"
            ],
            "name": "LexServerCallback",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 84,
            "token_start_col": 3,
            "var_type": "bool (lex_common_msgs::AudioTextConversationRequest &, lex_common_msgs::AudioTextConversationResponse &)"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "CXX_METHOD",
            "line": 90,
            "line_tokens": [
                "bool",
                "IsServiceValid",
                "(",
                ")",
                "{",
                "return",
                "(",
                "nullptr",
                "!=",
                "static_cast",
                "<",
                "void",
                "*",
                ">",
                "(",
                "lex_server_",
                ")",
                ")",
                ";",
                "}"
            ],
            "name": "IsServiceValid",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 82,
            "token_start_col": 3,
            "var_type": "bool ()"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "CXX_METHOD",
            "line": 85,
            "line_tokens": [
                "void",
                "Init",
                "(",
                ")"
            ],
            "name": "Init",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 14,
            "token_start_col": 3,
            "var_type": "void ()"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "CXX_METHOD",
            "line": 199,
            "line_tokens": [
                "bool",
                "LexNode",
                "::",
                "LexServerCallback",
                "(",
                "lex_common_msgs",
                "::",
                "AudioTextConversationRequest",
                "&",
                "request",
                ",",
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response",
                ")",
                "{",
                "if",
                "(",
                "!",
                "lex_runtime_client_",
                ")",
                "{",
                "// @todo define a new exception",
                "AWS_LOG_WARN",
                "(",
                "__func__",
                ",",
                "\"Lex runtime client is not initialized, LoadConfiguration.\"",
                ")",
                ";",
                "throw",
                "std",
                "::",
                "invalid_argument",
                "(",
                "\"Lex runtime client is not initialized, LoadConfiguration.\"",
                ")",
                ";",
                "}",
                "return",
                "PostContent",
                "(",
                "request",
                ",",
                "response",
                ",",
                "lex_configuration_",
                ",",
                "lex_runtime_client_",
                ")",
                ";",
                "}"
            ],
            "name": "LexServerCallback",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": "bool (lex_common_msgs::AudioTextConversationRequest &, lex_common_msgs::AudioTextConversationResponse &)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "CXX_METHOD",
            "line": 191,
            "line_tokens": [
                "void",
                "LexNode",
                "::",
                "ConfigureAwsLex",
                "(",
                "LexConfiguration",
                "&",
                "lex_configuration",
                ",",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "lex_runtime_client",
                ")",
                "{",
                "lex_configuration_",
                "=",
                "lex_configuration",
                ";",
                "lex_runtime_client_",
                "=",
                "lex_runtime_client",
                ";",
                "}"
            ],
            "name": "ConfigureAwsLex",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": "void (Aws::Lex::LexConfiguration &, std::shared_ptr<Aws::LexRuntimeService::LexRuntimeServiceClient>)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "CXX_METHOD",
            "line": 185,
            "line_tokens": [
                "void",
                "LexNode",
                "::",
                "Init",
                "(",
                ")",
                "{",
                "lex_server_",
                "=",
                "node_handle_",
                ".",
                "advertiseService",
                "<",
                ">",
                "(",
                "\"lex_conversation\"",
                ",",
                "&",
                "LexNode",
                "::",
                "LexServerCallback",
                ",",
                "this",
                ")",
                ";",
                "}"
            ],
            "name": "Init",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": "void ()"
        }
    ],
    "DECL_REF_EXPR": [
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 50,
            "line_tokens": [
                "options"
            ],
            "name": "options",
            "src_file_path": "src/main.cpp",
            "token_end_col": 27,
            "token_start_col": 20,
            "var_type": "Aws::SDKOptions"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 48,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/main.cpp",
            "token_end_col": 54,
            "token_start_col": 3,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/init.h",
            "kind": "DECL_REF_EXPR",
            "line": 46,
            "line_tokens": [
                "ros",
                "::",
                "spin"
            ],
            "name": "spin",
            "src_file_path": "src/main.cpp",
            "token_end_col": 12,
            "token_start_col": 3,
            "var_type": "void ()"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 43,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/main.cpp",
            "token_end_col": 49,
            "token_start_col": 3,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 40,
            "line_tokens": [
                "options"
            ],
            "name": "options",
            "src_file_path": "src/main.cpp",
            "token_end_col": 23,
            "token_start_col": 16,
            "var_type": "Aws::SDKOptions"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "DECL_REF_EXPR",
            "line": 35,
            "line_tokens": [
                "Aws",
                "::",
                "Lex",
                "::",
                "BuildLexNode"
            ],
            "name": "BuildLexNode",
            "src_file_path": "src/main.cpp",
            "token_end_col": 41,
            "token_start_col": 19,
            "var_type": "Aws::Lex::LexNode (std::shared_ptr<Client::ParameterReaderInterface>)"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 33,
            "line_tokens": [
                "argv"
            ],
            "name": "argv",
            "src_file_path": "src/main.cpp",
            "token_end_col": 23,
            "token_start_col": 19,
            "var_type": "char *[]"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 33,
            "line_tokens": [
                "argc"
            ],
            "name": "argc",
            "src_file_path": "src/main.cpp",
            "token_end_col": 17,
            "token_start_col": 13,
            "var_type": "int"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/init.h",
            "kind": "DECL_REF_EXPR",
            "line": 33,
            "line_tokens": [
                "ros",
                "::",
                "init"
            ],
            "name": "init",
            "src_file_path": "src/main.cpp",
            "token_end_col": 12,
            "token_start_col": 3,
            "var_type": "void (int &, char **, const std::string &, uint32_t)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 207,
            "line_tokens": [
                "response"
            ],
            "name": "response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 39,
            "token_start_col": 31,
            "var_type": "lex_common_msgs::AudioTextConversationResponse"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 207,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 29,
            "token_start_col": 22,
            "var_type": "lex_common_msgs::AudioTextConversationRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 207,
            "line_tokens": [
                "PostContent"
            ],
            "name": "PostContent",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 21,
            "token_start_col": 10,
            "var_type": "bool (lex_common_msgs::AudioTextConversationRequest &, lex_common_msgs::AudioTextConversationResponse &, const Aws::Lex::LexConfiguration &, std::shared_ptr<const LexRuntimeService::LexRuntimeServiceClient>)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 204,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 88,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 196,
            "line_tokens": [
                "lex_runtime_client"
            ],
            "name": "lex_runtime_client",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 43,
            "token_start_col": 25,
            "var_type": "std::shared_ptr<Aws::LexRuntimeService::LexRuntimeServiceClient>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 195,
            "line_tokens": [
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 41,
            "token_start_col": 24,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "DECL_REF_EXPR",
            "line": 195,
            "line_tokens": [
                "="
            ],
            "name": "operator=",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 23,
            "token_start_col": 22,
            "var_type": "Aws::Lex::LexConfiguration &(const Aws::Lex::LexConfiguration &) noexcept(false)"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "DECL_REF_EXPR",
            "line": 188,
            "line_tokens": [
                "LexNode",
                "::",
                "LexServerCallback"
            ],
            "name": "LexServerCallback",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 84,
            "token_start_col": 58,
            "var_type": "bool (lex_common_msgs::AudioTextConversationRequest &, lex_common_msgs::AudioTextConversationResponse &)"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/service_server.h",
            "kind": "DECL_REF_EXPR",
            "line": 187,
            "line_tokens": [
                "="
            ],
            "name": "operator=",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 16,
            "token_start_col": 15,
            "var_type": "ros::ServiceServer &(const ros::ServiceServer &) noexcept"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 180,
            "line_tokens": [
                "lex_node"
            ],
            "name": "lex_node",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 18,
            "token_start_col": 10,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 179,
            "line_tokens": [
                "lex_node"
            ],
            "name": "lex_node",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 11,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 178,
            "line_tokens": [
                "lex_runtime_client"
            ],
            "name": "lex_runtime_client",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 65,
            "token_start_col": 47,
            "var_type": "std::shared_ptr<Aws::LexRuntimeService::LexRuntimeServiceClient>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 178,
            "line_tokens": [
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 45,
            "token_start_col": 28,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 178,
            "line_tokens": [
                "lex_node"
            ],
            "name": "lex_node",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 11,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 177,
            "line_tokens": [
                "configuration_provider"
            ],
            "name": "configuration_provider",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 43,
            "token_start_col": 21,
            "var_type": "Client::ClientConfigurationProvider"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "DECL_REF_EXPR",
            "line": 177,
            "line_tokens": [
                "kAllocationTag"
            ],
            "name": "kAllocationTag",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 19,
            "token_start_col": 5,
            "var_type": "const char *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 175,
            "line_tokens": [
                "params"
            ],
            "name": "params",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 68,
            "token_start_col": 62,
            "var_type": "std::shared_ptr<Client::ParameterReaderInterface>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 174,
            "line_tokens": [
                "params"
            ],
            "name": "params",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 53,
            "token_start_col": 47,
            "var_type": "std::shared_ptr<Client::ParameterReaderInterface>"
        },
        {
            "declaration_filepath": "include/lex_node/lex_param_helper.h",
            "kind": "DECL_REF_EXPR",
            "line": 174,
            "line_tokens": [
                "LoadLexParameters"
            ],
            "name": "LoadLexParameters",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 45,
            "token_start_col": 28,
            "var_type": "Aws::Lex::LexConfiguration (const Client::ParameterReaderInterface &)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 172,
            "line_tokens": [
                "params"
            ],
            "name": "params",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 11,
            "token_start_col": 5,
            "var_type": "std::shared_ptr<Client::ParameterReaderInterface>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 171,
            "line_tokens": [
                "params"
            ],
            "name": "params",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 24,
            "token_start_col": 18,
            "var_type": "std::shared_ptr<Client::ParameterReaderInterface>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 165,
            "line_tokens": [
                "is_valid"
            ],
            "name": "is_valid",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 18,
            "token_start_col": 10,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 162,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 93,
            "token_start_col": 5,
            "var_type": "Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 162,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 93,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 162,
            "line_tokens": [
                "post_content_result"
            ],
            "name": "post_content_result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Outcome<Aws::LexRuntimeService::Model::PostContentResult, Aws::Client::AWSError<Aws::LexRuntimeService::LexRuntimeServiceErrors> >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 161,
            "line_tokens": [
                "is_valid"
            ],
            "name": "is_valid",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 13,
            "token_start_col": 5,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 156,
            "line_tokens": [
                "response"
            ],
            "name": "response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 56,
            "token_start_col": 48,
            "var_type": "lex_common_msgs::AudioTextConversationResponse"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 156,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 46,
            "token_start_col": 40,
            "var_type": "Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 156,
            "line_tokens": [
                "CopyResult"
            ],
            "name": "CopyResult",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 39,
            "token_start_col": 29,
            "var_type": "int (Aws::LexRuntimeService::Model::PostContentResult &, lex_common_msgs::AudioTextConversationResponse &)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 154,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 90,
            "token_start_col": 5,
            "var_type": "Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 154,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 90,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 154,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 153,
            "line_tokens": [
                "post_content_result"
            ],
            "name": "post_content_result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 40,
            "token_start_col": 21,
            "var_type": "Aws::Utils::Outcome<Aws::LexRuntimeService::Model::PostContentResult, Aws::Client::AWSError<Aws::LexRuntimeService::LexRuntimeServiceErrors> >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 152,
            "line_tokens": [
                "post_content_result"
            ],
            "name": "post_content_result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 26,
            "token_start_col": 7,
            "var_type": "Aws::Utils::Outcome<Aws::LexRuntimeService::Model::PostContentResult, Aws::Client::AWSError<Aws::LexRuntimeService::LexRuntimeServiceErrors> >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 150,
            "line_tokens": [
                "post_content_request"
            ],
            "name": "post_content_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 82,
            "token_start_col": 62,
            "var_type": "Aws::LexRuntimeService::Model::PostContentRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 150,
            "line_tokens": [
                "lex_runtime_client"
            ],
            "name": "lex_runtime_client",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 48,
            "token_start_col": 30,
            "var_type": "std::shared_ptr<const LexRuntimeService::LexRuntimeServiceClient>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 149,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 79,
            "token_start_col": 3,
            "var_type": "Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 149,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 79,
            "token_start_col": 3,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 149,
            "line_tokens": [
                "post_content_request"
            ],
            "name": "post_content_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 3,
            "token_start_col": 3,
            "var_type": "Aws::LexRuntimeService::Model::PostContentRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 149,
            "line_tokens": [
                "<<"
            ],
            "name": "operator<<",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 3,
            "token_start_col": 3,
            "var_type": "std::ostream &(std::ostream &, const Aws::LexRuntimeService::Model::PostContentRequest &)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 148,
            "line_tokens": [
                "io_stream"
            ],
            "name": "io_stream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 41,
            "token_start_col": 32,
            "var_type": "std::shared_ptr<std::__cxx11::basic_stringstream<char, std::char_traits<char>, Aws::Allocator<char> > >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 148,
            "line_tokens": [
                "post_content_request"
            ],
            "name": "post_content_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 23,
            "token_start_col": 3,
            "var_type": "Aws::LexRuntimeService::Model::PostContentRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 146,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 26,
            "token_start_col": 19,
            "var_type": "lex_common_msgs::AudioTextConversationRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 146,
            "line_tokens": [
                "io_stream"
            ],
            "name": "io_stream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 15,
            "token_start_col": 6,
            "var_type": "std::shared_ptr<std::__cxx11::basic_stringstream<char, std::char_traits<char>, Aws::Allocator<char> > >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 144,
            "line_tokens": [
                "io_stream"
            ],
            "name": "io_stream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 62,
            "token_start_col": 53,
            "var_type": "std::shared_ptr<std::__cxx11::basic_stringstream<char, std::char_traits<char>, Aws::Allocator<char> > >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 143,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 58,
            "token_start_col": 51,
            "var_type": "lex_common_msgs::AudioTextConversationRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 143,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 22,
            "token_start_col": 15,
            "var_type": "lex_common_msgs::AudioTextConversationRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 142,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 15,
            "token_start_col": 8,
            "var_type": "lex_common_msgs::AudioTextConversationRequest"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "DECL_REF_EXPR",
            "line": 140,
            "line_tokens": [
                "kAllocationTag"
            ],
            "name": "kAllocationTag",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 69,
            "token_start_col": 55,
            "var_type": "const char *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 139,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 46,
            "token_start_col": 39,
            "var_type": "lex_common_msgs::AudioTextConversationRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 139,
            "line_tokens": [
                "post_content_request"
            ],
            "name": "post_content_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 23,
            "token_start_col": 3,
            "var_type": "Aws::LexRuntimeService::Model::PostContentRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 137,
            "line_tokens": [
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 34,
            "token_start_col": 17,
            "var_type": "const Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 136,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 24,
            "token_start_col": 17,
            "var_type": "lex_common_msgs::AudioTextConversationRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 135,
            "line_tokens": [
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 35,
            "token_start_col": 18,
            "var_type": "const Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 134,
            "line_tokens": [
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 54,
            "token_start_col": 37,
            "var_type": "const Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 134,
            "line_tokens": [
                "post_content_request"
            ],
            "name": "post_content_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 23,
            "token_start_col": 3,
            "var_type": "Aws::LexRuntimeService::Model::PostContentRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 112,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 5,
            "var_type": "Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 112,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 112,
            "line_tokens": [
                "slot_string"
            ],
            "name": "slot_string",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "Aws::String"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 109,
            "line_tokens": [
                "response_it"
            ],
            "name": "response_it",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 18,
            "token_start_col": 7,
            "var_type": "__gnu_cxx::__normal_iterator<lex_common_msgs::KeyValue_<std::allocator<void> > *, std::vector<lex_common_msgs::KeyValue_<std::allocator<void> >, std::allocator<lex_common_msgs::KeyValue_<std::allocator<void> > > > >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 108,
            "line_tokens": [
                "element"
            ],
            "name": "element",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 35,
            "token_start_col": 28,
            "var_type": "std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, Aws::Allocator<char> >, Aws::Utils::Json::JsonView>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 108,
            "line_tokens": [
                "response_it"
            ],
            "name": "response_it",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 18,
            "token_start_col": 7,
            "var_type": "__gnu_cxx::__normal_iterator<lex_common_msgs::KeyValue_<std::allocator<void> > *, std::vector<lex_common_msgs::KeyValue_<std::allocator<void> >, std::allocator<lex_common_msgs::KeyValue_<std::allocator<void> > > > >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 107,
            "line_tokens": [
                "element"
            ],
            "name": "element",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 33,
            "token_start_col": 26,
            "var_type": "std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, Aws::Allocator<char> >, Aws::Utils::Json::JsonView>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 107,
            "line_tokens": [
                "response_it"
            ],
            "name": "response_it",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 18,
            "token_start_col": 7,
            "var_type": "__gnu_cxx::__normal_iterator<lex_common_msgs::KeyValue_<std::allocator<void> > *, std::vector<lex_common_msgs::KeyValue_<std::allocator<void> >, std::allocator<lex_common_msgs::KeyValue_<std::allocator<void> > > > >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 106,
            "line_tokens": [
                "view"
            ],
            "name": "view",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 31,
            "token_start_col": 27,
            "var_type": "std::map<std::__cxx11::basic_string<char, std::char_traits<char>, Aws::Allocator<char> >, Aws::Utils::Json::JsonView, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, Aws::Allocator<char> > >, Aws::Allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, Aws::Allocator<char> >, Aws::Utils::Json::JsonView> > >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 106,
            "line_tokens": [
                ":"
            ],
            "name": "__begin3",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 26,
            "token_start_col": 25,
            "var_type": "std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, Aws::Allocator<char> >, Aws::Utils::Json::JsonView> >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 105,
            "line_tokens": [
                "response"
            ],
            "name": "response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 32,
            "token_start_col": 24,
            "var_type": "lex_common_msgs::AudioTextConversationResponse"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 104,
            "line_tokens": [
                "view"
            ],
            "name": "view",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 65,
            "token_start_col": 61,
            "var_type": "std::map<std::__cxx11::basic_string<char, std::char_traits<char>, Aws::Allocator<char> >, Aws::Utils::Json::JsonView, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, Aws::Allocator<char> > >, Aws::Allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, Aws::Allocator<char> >, Aws::Utils::Json::JsonView> > >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 104,
            "line_tokens": [
                "response"
            ],
            "name": "response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 13,
            "token_start_col": 5,
            "var_type": "lex_common_msgs::AudioTextConversationResponse"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 103,
            "line_tokens": [
                "slot_json"
            ],
            "name": "slot_json",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 26,
            "token_start_col": 17,
            "var_type": "Aws::Utils::Json::JsonValue"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 101,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 64,
            "token_start_col": 5,
            "var_type": "Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 101,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 64,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 101,
            "line_tokens": [
                "slot_string"
            ],
            "name": "slot_string",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "Aws::String"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 100,
            "line_tokens": [
                "slot_json"
            ],
            "name": "slot_json",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 16,
            "token_start_col": 7,
            "var_type": "Aws::Utils::Json::JsonValue"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 99,
            "line_tokens": [
                "slot_string"
            ],
            "name": "slot_string",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 59,
            "token_start_col": 48,
            "var_type": "Aws::String"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 98,
            "line_tokens": [
                "slot_byte_buffer"
            ],
            "name": "slot_byte_buffer",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 43,
            "token_start_col": 27,
            "var_type": "Aws::Utils::Array<unsigned char>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 97,
            "line_tokens": [
                "slot_byte_buffer"
            ],
            "name": "slot_byte_buffer",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 68,
            "token_start_col": 52,
            "var_type": "Aws::Utils::Array<unsigned char>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 96,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 72,
            "token_start_col": 66,
            "var_type": "Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 95,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 42,
            "token_start_col": 36,
            "var_type": "Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 94,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 55,
            "token_start_col": 49,
            "var_type": "Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 94,
            "line_tokens": [
                "response"
            ],
            "name": "response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 11,
            "token_start_col": 3,
            "var_type": "lex_common_msgs::AudioTextConversationResponse"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 92,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 32,
            "token_start_col": 26,
            "var_type": "Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 92,
            "line_tokens": [
                "response"
            ],
            "name": "response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 11,
            "token_start_col": 3,
            "var_type": "lex_common_msgs::AudioTextConversationResponse"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 90,
            "line_tokens": [
                "audio_size"
            ],
            "name": "audio_size",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 42,
            "token_start_col": 32,
            "var_type": "std::streampos"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 89,
            "line_tokens": [
                "response"
            ],
            "name": "response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 66,
            "token_start_col": 58,
            "var_type": "lex_common_msgs::AudioTextConversationResponse"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 89,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 9,
            "token_start_col": 3,
            "var_type": "Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 88,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 9,
            "token_start_col": 3,
            "var_type": "Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 87,
            "line_tokens": [
                "audio_size"
            ],
            "name": "audio_size",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 65,
            "token_start_col": 55,
            "var_type": "std::streampos"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 87,
            "line_tokens": [
                "response"
            ],
            "name": "response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 11,
            "token_start_col": 3,
            "var_type": "lex_common_msgs::AudioTextConversationResponse"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 86,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 37,
            "token_start_col": 31,
            "var_type": "Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 84,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 34,
            "token_start_col": 28,
            "var_type": "Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 84,
            "line_tokens": [
                "response"
            ],
            "name": "response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 11,
            "token_start_col": 3,
            "var_type": "lex_common_msgs::AudioTextConversationResponse"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 83,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 68,
            "token_start_col": 62,
            "var_type": "Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 83,
            "line_tokens": [
                "response"
            ],
            "name": "response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 11,
            "token_start_col": 3,
            "var_type": "lex_common_msgs::AudioTextConversationResponse"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 69,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 12,
            "token_start_col": 10,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 68,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 34,
            "token_start_col": 28,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 68,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 67,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 35,
            "token_start_col": 29,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 67,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 66,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 41,
            "token_start_col": 35,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 66,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 65,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 28,
            "token_start_col": 22,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 65,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 63,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 70,
            "token_start_col": 64,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 63,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 62,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 57,
            "token_start_col": 51,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 62,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 59,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 37,
            "token_start_col": 31,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 59,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 58,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 30,
            "token_start_col": 24,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 58,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 57,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 51,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 12,
            "token_start_col": 10,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 50,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 36,
            "token_start_col": 29,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 50,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 49,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 35,
            "token_start_col": 28,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 49,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 48,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 31,
            "token_start_col": 24,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 48,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 47,
            "line_tokens": [
                "ss"
            ],
            "name": "ss",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 29,
            "token_start_col": 27,
            "var_type": "std::stringstream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 47,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 46,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 16,
            "token_start_col": 9,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 46,
            "line_tokens": [
                "ss"
            ],
            "name": "ss",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::stringstream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 44,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 33,
            "token_start_col": 26,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 44,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 43,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 33,
            "token_start_col": 26,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 43,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 42,
            "line_tokens": [
                "os"
            ],
            "name": "os",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 36,
            "line_tokens": [
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 27,
            "token_start_col": 10,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 33,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 68,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 32,
            "line_tokens": [
                "is_invalid"
            ],
            "name": "is_invalid",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 17,
            "token_start_col": 7,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 31,
            "line_tokens": [
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 109,
            "token_start_col": 92,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "DECL_REF_EXPR",
            "line": 31,
            "line_tokens": [
                "kUserIdKey"
            ],
            "name": "kUserIdKey",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 89,
            "token_start_col": 79,
            "var_type": "const char [26]"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 31,
            "line_tokens": [
                "parameter_interface"
            ],
            "name": "parameter_interface",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 54,
            "token_start_col": 35,
            "var_type": "const Client::ParameterReaderInterface"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 31,
            "line_tokens": [
                "is_invalid"
            ],
            "name": "is_invalid",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 13,
            "token_start_col": 3,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 30,
            "line_tokens": [
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 110,
            "token_start_col": 93,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "DECL_REF_EXPR",
            "line": 30,
            "line_tokens": [
                "kBotNameKey"
            ],
            "name": "kBotNameKey",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 90,
            "token_start_col": 79,
            "var_type": "const char [27]"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 30,
            "line_tokens": [
                "parameter_interface"
            ],
            "name": "parameter_interface",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 54,
            "token_start_col": 35,
            "var_type": "const Client::ParameterReaderInterface"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 30,
            "line_tokens": [
                "is_invalid"
            ],
            "name": "is_invalid",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 13,
            "token_start_col": 3,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 29,
            "line_tokens": [
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 111,
            "token_start_col": 94,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "DECL_REF_EXPR",
            "line": 29,
            "line_tokens": [
                "kBotAliasKey"
            ],
            "name": "kBotAliasKey",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 91,
            "token_start_col": 79,
            "var_type": "const char [28]"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 29,
            "line_tokens": [
                "parameter_interface"
            ],
            "name": "parameter_interface",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 54,
            "token_start_col": 35,
            "var_type": "const Client::ParameterReaderInterface"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "DECL_REF_EXPR",
            "line": 29,
            "line_tokens": [
                "is_invalid"
            ],
            "name": "is_invalid",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 13,
            "token_start_col": 3,
            "var_type": "bool"
        }
    ],
    "DESTRUCTOR": [
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "DESTRUCTOR",
            "line": 80,
            "line_tokens": [
                "~",
                "LexNode",
                "(",
                ")",
                "=",
                "default"
            ],
            "name": "~LexNode",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 23,
            "token_start_col": 3,
            "var_type": "void () throw()"
        }
    ],
    "FUNCTION_CALL": [
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/service_server.h",
            "kind": "FUNCTION_CALL",
            "line": 90,
            "line_tokens": [
                "lex_server_"
            ],
            "name": "operator void *",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 77,
            "token_start_col": 66,
            "var_type": "void *"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/init.h",
            "kind": "FUNCTION_CALL",
            "line": 46,
            "line_tokens": [
                "ros",
                "::",
                "spin",
                "(",
                ")"
            ],
            "name": "spin",
            "src_file_path": "src/main.cpp",
            "token_end_col": 14,
            "token_start_col": 3,
            "var_type": "void"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "FUNCTION_CALL",
            "line": 35,
            "line_tokens": [
                "Aws",
                "::",
                "Lex",
                "::",
                "BuildLexNode",
                "(",
                ")"
            ],
            "name": "BuildLexNode",
            "src_file_path": "src/main.cpp",
            "token_end_col": 43,
            "token_start_col": 19,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/init.h",
            "kind": "FUNCTION_CALL",
            "line": 33,
            "line_tokens": [
                "ros",
                "::",
                "init",
                "(",
                "argc",
                ",",
                "argv",
                ",",
                "\"lex_node\"",
                ")"
            ],
            "name": "init",
            "src_file_path": "src/main.cpp",
            "token_end_col": 36,
            "token_start_col": 3,
            "var_type": "void"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_CALL",
            "line": 207,
            "line_tokens": [
                "PostContent",
                "(",
                "request",
                ",",
                "response",
                ",",
                "lex_configuration_",
                ",",
                "lex_runtime_client_",
                ")"
            ],
            "name": "PostContent",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 81,
            "token_start_col": 10,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "FUNCTION_CALL",
            "line": 195,
            "line_tokens": [
                "lex_configuration_",
                "=",
                "lex_configuration"
            ],
            "name": "operator=",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 41,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/service_server.h",
            "kind": "FUNCTION_CALL",
            "line": 187,
            "line_tokens": [
                "lex_server_",
                "=",
                "node_handle_",
                ".",
                "advertiseService",
                "<",
                ">",
                "(",
                "\"lex_conversation\"",
                ",",
                "&",
                "LexNode",
                "::",
                "LexServerCallback",
                ",",
                "this",
                ")"
            ],
            "name": "operator=",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 91,
            "token_start_col": 3,
            "var_type": "ros::ServiceServer"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/node_handle.h",
            "kind": "FUNCTION_CALL",
            "line": 188,
            "line_tokens": [
                "node_handle_",
                ".",
                "advertiseService",
                "<",
                ">",
                "(",
                "\"lex_conversation\"",
                ",",
                "&",
                "LexNode",
                "::",
                "LexServerCallback",
                ",",
                "this",
                ")"
            ],
            "name": "advertiseService",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 91,
            "token_start_col": 5,
            "var_type": "ros::ServiceServer"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/node_handle.h",
            "kind": "FUNCTION_CALL",
            "line": 183,
            "line_tokens": [
                "node_handle_",
                "(",
                "\"~\"",
                ")"
            ],
            "name": "NodeHandle",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 39,
            "token_start_col": 22,
            "var_type": "ros::NodeHandle"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "FUNCTION_CALL",
            "line": 179,
            "line_tokens": [
                "lex_node",
                ".",
                "Init",
                "(",
                ")"
            ],
            "name": "Init",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 18,
            "token_start_col": 3,
            "var_type": "void"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "FUNCTION_CALL",
            "line": 178,
            "line_tokens": [
                "lex_node",
                ".",
                "ConfigureAwsLex",
                "(",
                "lex_configuration",
                ",",
                "lex_runtime_client",
                ")"
            ],
            "name": "ConfigureAwsLex",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 66,
            "token_start_col": 3,
            "var_type": "void"
        },
        {
            "declaration_filepath": "include/lex_node/lex_param_helper.h",
            "kind": "FUNCTION_CALL",
            "line": 174,
            "line_tokens": [
                "LoadLexParameters",
                "(",
                "*",
                "params",
                ")"
            ],
            "name": "LoadLexParameters",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 54,
            "token_start_col": 28,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "FUNCTION_CALL",
            "line": 170,
            "line_tokens": [
                "lex_node"
            ],
            "name": "LexNode",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 19,
            "token_start_col": 11,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_CALL",
            "line": 156,
            "line_tokens": [
                "CopyResult",
                "(",
                "result",
                ",",
                "response",
                ")"
            ],
            "name": "CopyResult",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 57,
            "token_start_col": 29,
            "var_type": "int"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_CALL",
            "line": 149,
            "line_tokens": [],
            "name": "operator<<",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 3,
            "token_start_col": 3,
            "var_type": "std::ostream"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "FUNCTION_CALL",
            "line": 27,
            "line_tokens": [
                "lex_configuration"
            ],
            "name": "LexConfiguration",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 37,
            "token_start_col": 20,
            "var_type": "Aws::Lex::LexConfiguration"
        }
    ],
    "FUNCTION_DECL": [
        {
            "declaration_filepath": "include/lex_node/lex_param_helper.h",
            "kind": "FUNCTION_DECL",
            "line": 29,
            "line_tokens": [
                "LexConfiguration",
                "LoadLexParameters",
                "(",
                "const",
                "Client",
                "::",
                "ParameterReaderInterface",
                "&",
                "parameter_interface",
                ")"
            ],
            "name": "LoadLexParameters",
            "src_file_path": "include/lex_node/lex_param_helper.h",
            "token_end_col": 97,
            "token_start_col": 1,
            "var_type": "Aws::Lex::LexConfiguration (const Client::ParameterReaderInterface &)"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "FUNCTION_DECL",
            "line": 41,
            "line_tokens": [
                "LexNode",
                "BuildLexNode",
                "(",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Client",
                "::",
                "ParameterReaderInterface",
                ">",
                "params",
                "=",
                "nullptr",
                ")"
            ],
            "name": "BuildLexNode",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 89,
            "token_start_col": 1,
            "var_type": "Aws::Lex::LexNode (std::shared_ptr<Client::ParameterReaderInterface>)"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "FUNCTION_DECL",
            "line": 31,
            "line_tokens": [
                "int",
                "main",
                "(",
                "int",
                "argc",
                ",",
                "char",
                "*",
                "argv",
                "[",
                "]",
                ")",
                "{",
                "ros",
                "::",
                "init",
                "(",
                "argc",
                ",",
                "argv",
                ",",
                "\"lex_node\"",
                ")",
                ";",
                "auto",
                "lex_node",
                "=",
                "Aws",
                "::",
                "Lex",
                "::",
                "BuildLexNode",
                "(",
                ")",
                ";",
                "Aws",
                "::",
                "Utils",
                "::",
                "Logging",
                "::",
                "InitializeAWSLogging",
                "(",
                "Aws",
                "::",
                "MakeShared",
                "<",
                "Aws",
                "::",
                "Utils",
                "::",
                "Logging",
                "::",
                "AWSROSLogger",
                ">",
                "(",
                "\"lex_node\"",
                ")",
                ")",
                ";",
                "Aws",
                "::",
                "SDKOptions",
                "options",
                ";",
                "Aws",
                "::",
                "InitAPI",
                "(",
                "options",
                ")",
                ";",
                "AWS_LOG_INFO",
                "(",
                "__func__",
                ",",
                "\"Starting Lex Node...\"",
                ")",
                ";",
                "// blocking here, waiting until shutdown.",
                "ros",
                "::",
                "spin",
                "(",
                ")",
                ";",
                "AWS_LOG_INFO",
                "(",
                "__func__",
                ",",
                "\"Shutting down Lex Node...\"",
                ")",
                ";",
                "Aws",
                "::",
                "Utils",
                "::",
                "Logging",
                "::",
                "ShutdownAWSLogging",
                "(",
                ")",
                ";",
                "Aws",
                "::",
                "ShutdownAPI",
                "(",
                "options",
                ")",
                ";",
                "return",
                "0",
                ";",
                "}"
            ],
            "name": "main",
            "src_file_path": "src/main.cpp",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": "int (int, char **)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_DECL",
            "line": 168,
            "line_tokens": [
                "LexNode",
                "BuildLexNode",
                "(",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Client",
                "::",
                "ParameterReaderInterface",
                ">",
                "params",
                ")",
                "{",
                "LexNode",
                "lex_node",
                ";",
                "if",
                "(",
                "nullptr",
                "==",
                "params",
                ")",
                "{",
                "params",
                "=",
                "std",
                "::",
                "make_shared",
                "<",
                "Client",
                "::",
                "Ros1NodeParameterReader",
                ">",
                "(",
                ")",
                ";",
                "}",
                "auto",
                "lex_configuration",
                "=",
                "LoadLexParameters",
                "(",
                "*",
                "params",
                ")",
                ";",
                "Client",
                "::",
                "ClientConfigurationProvider",
                "configuration_provider",
                "(",
                "params",
                ")",
                ";",
                "auto",
                "lex_runtime_client",
                "=",
                "Aws",
                "::",
                "MakeShared",
                "<",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "(",
                "kAllocationTag",
                ",",
                "configuration_provider",
                ".",
                "GetClientConfiguration",
                "(",
                ")",
                ")",
                ";",
                "lex_node",
                ".",
                "ConfigureAwsLex",
                "(",
                "lex_configuration",
                ",",
                "lex_runtime_client",
                ")",
                ";",
                "lex_node",
                ".",
                "Init",
                "(",
                ")",
                ";",
                "return",
                "lex_node",
                ";",
                "}"
            ],
            "name": "BuildLexNode",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": "Aws::Lex::LexNode (std::shared_ptr<Client::ParameterReaderInterface>)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_DECL",
            "line": 127,
            "line_tokens": [
                "bool",
                "PostContent",
                "(",
                "lex_common_msgs",
                "::",
                "AudioTextConversationRequest",
                "&",
                "request",
                ",",
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response",
                ",",
                "const",
                "LexConfiguration",
                "&",
                "lex_configuration",
                ",",
                "std",
                "::",
                "shared_ptr",
                "<",
                "const",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "lex_runtime_client",
                ")",
                "{",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentRequest",
                "post_content_request",
                ";",
                "post_content_request",
                ".",
                "WithBotAlias",
                "(",
                "lex_configuration",
                ".",
                "bot_alias",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ".",
                "WithBotName",
                "(",
                "lex_configuration",
                ".",
                "bot_name",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ".",
                "WithAccept",
                "(",
                "request",
                ".",
                "accept_type",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ".",
                "WithUserId",
                "(",
                "lex_configuration",
                ".",
                "user_id",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ";",
                "post_content_request",
                ".",
                "SetContentType",
                "(",
                "request",
                ".",
                "content_type",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ";",
                "auto",
                "io_stream",
                "=",
                "Aws",
                "::",
                "MakeShared",
                "<",
                "Aws",
                "::",
                "StringStream",
                ">",
                "(",
                "kAllocationTag",
                ")",
                ";",
                "if",
                "(",
                "!",
                "request",
                ".",
                "audio_request",
                ".",
                "data",
                ".",
                "empty",
                "(",
                ")",
                ")",
                "{",
                "std",
                "::",
                "copy",
                "(",
                "request",
                ".",
                "audio_request",
                ".",
                "data",
                ".",
                "begin",
                "(",
                ")",
                ",",
                "request",
                ".",
                "audio_request",
                ".",
                "data",
                ".",
                "end",
                "(",
                ")",
                ",",
                "std",
                "::",
                "ostream_iterator",
                "<",
                "unsigned",
                "char",
                ">",
                "(",
                "*",
                "io_stream",
                ")",
                ")",
                ";",
                "}",
                "else",
                "{",
                "*",
                "io_stream",
                "<<",
                "request",
                ".",
                "text_request",
                ";",
                "}",
                "post_content_request",
                ".",
                "SetBody",
                "(",
                "io_stream",
                ")",
                ";",
                "AWS_LOGSTREAM_DEBUG",
                "(",
                "__func__",
                ",",
                "\"PostContentRequest \"",
                "<<",
                "post_content_request",
                ")",
                ";",
                "auto",
                "post_content_result",
                "=",
                "lex_runtime_client",
                "->",
                "PostContent",
                "(",
                "post_content_request",
                ")",
                ";",
                "bool",
                "is_valid",
                "=",
                "true",
                ";",
                "if",
                "(",
                "post_content_result",
                ".",
                "IsSuccess",
                "(",
                ")",
                ")",
                "{",
                "auto",
                "&",
                "result",
                "=",
                "post_content_result",
                ".",
                "GetResult",
                "(",
                ")",
                ";",
                "AWS_LOGSTREAM_DEBUG",
                "(",
                "__func__",
                ",",
                "\"PostContentResult succeeded: \"",
                "<<",
                "result",
                ".",
                "GetMessage",
                "(",
                ")",
                ")",
                ";",
                "// @todo: use response variable for errors.",
                "/* auto error_code = */",
                "CopyResult",
                "(",
                "result",
                ",",
                "response",
                ")",
                ";",
                "// if (error_code) {",
                "//    is_valid = false;",
                "// }",
                "}",
                "else",
                "{",
                "is_valid",
                "=",
                "false",
                ";",
                "AWS_LOGSTREAM_ERROR",
                "(",
                "__func__",
                ",",
                "\"PostContentResult failed: \"",
                "<<",
                "post_content_result",
                ".",
                "GetError",
                "(",
                ")",
                ".",
                "GetMessage",
                "(",
                ")",
                ")",
                ";",
                "}",
                "return",
                "is_valid",
                ";",
                "}"
            ],
            "name": "PostContent",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": "bool (lex_common_msgs::AudioTextConversationRequest &, lex_common_msgs::AudioTextConversationResponse &, const Aws::Lex::LexConfiguration &, std::shared_ptr<const LexRuntimeService::LexRuntimeServiceClient>)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_DECL",
            "line": 79,
            "line_tokens": [
                "int",
                "CopyResult",
                "(",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentResult",
                "&",
                "result",
                ",",
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response",
                ")",
                "{",
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "MessageFormatTypeMapper",
                "::",
                "GetNameForMessageFormatType",
                ";",
                "response",
                ".",
                "message_format_type",
                "=",
                "GetNameForMessageFormatType",
                "(",
                "result",
                ".",
                "GetMessageFormat",
                "(",
                ")",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "response",
                ".",
                "text_response",
                "=",
                "result",
                ".",
                "GetMessage",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "std",
                "::",
                "streampos",
                "audio_size",
                "=",
                "result",
                ".",
                "GetAudioStream",
                "(",
                ")",
                ".",
                "seekg",
                "(",
                "0",
                ",",
                "std",
                "::",
                "ios_base",
                "::",
                "end",
                ")",
                ".",
                "tellg",
                "(",
                ")",
                ";",
                "response",
                ".",
                "audio_response",
                ".",
                "data",
                "=",
                "std",
                "::",
                "vector",
                "<",
                "uint8_t",
                ">",
                "(",
                "audio_size",
                ")",
                ";",
                "result",
                ".",
                "GetAudioStream",
                "(",
                ")",
                ".",
                "seekg",
                "(",
                "0",
                ",",
                "std",
                "::",
                "ios_base",
                "::",
                "beg",
                ")",
                ";",
                "result",
                ".",
                "GetAudioStream",
                "(",
                ")",
                ".",
                "read",
                "(",
                "reinterpret_cast",
                "<",
                "char",
                "*",
                ">",
                "(",
                "&",
                "response",
                ".",
                "audio_response",
                ".",
                "data",
                "[",
                "0",
                "]",
                ")",
                ",",
                "audio_size",
                ")",
                ";",
                "response",
                ".",
                "intent_name",
                "=",
                "result",
                ".",
                "GetIntentName",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "DialogStateMapper",
                "::",
                "GetNameForDialogState",
                ";",
                "response",
                ".",
                "dialog_state",
                "=",
                "GetNameForDialogState",
                "(",
                "result",
                ".",
                "GetDialogState",
                "(",
                ")",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "std",
                "::",
                "string",
                "session_attributes",
                "=",
                "result",
                ".",
                "GetSessionAttributes",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "auto",
                "slot_byte_buffer",
                "=",
                "Aws",
                "::",
                "Utils",
                "::",
                "HashingUtils",
                "::",
                "Base64Decode",
                "(",
                "result",
                ".",
                "GetSlots",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ";",
                "Aws",
                "::",
                "String",
                "slot_string",
                "(",
                "reinterpret_cast",
                "<",
                "char",
                "*",
                ">",
                "(",
                "slot_byte_buffer",
                ".",
                "GetUnderlyingData",
                "(",
                ")",
                ")",
                ",",
                "slot_byte_buffer",
                ".",
                "GetLength",
                "(",
                ")",
                ")",
                ";",
                "auto",
                "slot_json",
                "=",
                "Aws",
                "::",
                "Utils",
                "::",
                "Json",
                "::",
                "JsonValue",
                "(",
                "slot_string",
                ")",
                ";",
                "if",
                "(",
                "slot_json",
                ".",
                "WasParseSuccessful",
                "(",
                ")",
                ")",
                "{",
                "AWS_LOGSTREAM_DEBUG",
                "(",
                "__func__",
                ",",
                "\"slot_json: \"",
                "<<",
                "slot_string",
                ")",
                ";",
                "auto",
                "view",
                "=",
                "slot_json",
                ".",
                "View",
                "(",
                ")",
                ".",
                "GetAllObjects",
                "(",
                ")",
                ";",
                "response",
                ".",
                "slots",
                "=",
                "std",
                "::",
                "vector",
                "<",
                "lex_common_msgs",
                "::",
                "KeyValue",
                ">",
                "(",
                "view",
                ".",
                "size",
                "(",
                ")",
                ")",
                ";",
                "auto",
                "response_it",
                "=",
                "response",
                ".",
                "slots",
                ".",
                "begin",
                "(",
                ")",
                ";",
                "for",
                "(",
                "auto",
                "&",
                "element",
                ":",
                "view",
                ")",
                "{",
                "response_it",
                "->",
                "key",
                "=",
                "element",
                ".",
                "first",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "response_it",
                "->",
                "value",
                "=",
                "element",
                ".",
                "second",
                ".",
                "AsString",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "response_it",
                "++",
                ";",
                "}",
                "}",
                "else",
                "{",
                "AWS_LOGSTREAM_WARN",
                "(",
                "__func__",
                ",",
                "\"Unable to parse slot string \"",
                "<<",
                "slot_string",
                ")",
                ";",
                "}",
                "return",
                "0",
                ";",
                "}"
            ],
            "name": "CopyResult",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": "int (Aws::LexRuntimeService::Model::PostContentResult &, lex_common_msgs::AudioTextConversationResponse &)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_DECL",
            "line": 54,
            "line_tokens": [
                "std",
                "::",
                "ostream",
                "&",
                "operator",
                "<<",
                "(",
                "std",
                "::",
                "ostream",
                "&",
                "os",
                ",",
                "const",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentResult",
                "&",
                "result",
                ")",
                "{",
                "os",
                "<<",
                "\"PostContentResult: \"",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Message: \"",
                "<<",
                "result",
                ".",
                "GetMessage",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Slot to elicit: \"",
                "<<",
                "result",
                ".",
                "GetSlotToElicit",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "DialogStateMapper",
                "::",
                "GetNameForDialogState",
                ";",
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "MessageFormatTypeMapper",
                "::",
                "GetNameForMessageFormatType",
                ";",
                "os",
                "<<",
                "\"Dialog State: \"",
                "<<",
                "GetNameForDialogState",
                "(",
                "result",
                ".",
                "GetDialogState",
                "(",
                ")",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Message format type: \"",
                "<<",
                "GetNameForMessageFormatType",
                "(",
                "result",
                ".",
                "GetMessageFormat",
                "(",
                ")",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Slots: \"",
                "<<",
                "result",
                ".",
                "GetSlots",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Session Attributes: \"",
                "<<",
                "result",
                ".",
                "GetSessionAttributes",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Content Type: \"",
                "<<",
                "result",
                ".",
                "GetContentType",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Intent Name: \"",
                "<<",
                "result",
                ".",
                "GetIntentName",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "return",
                "os",
                ";",
                "}"
            ],
            "name": "operator<<",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": "std::ostream &(std::ostream &, const Aws::LexRuntimeService::Model::PostContentResult &)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_DECL",
            "line": 39,
            "line_tokens": [
                "std",
                "::",
                "ostream",
                "&",
                "operator",
                "<<",
                "(",
                "std",
                "::",
                "ostream",
                "&",
                "os",
                ",",
                "const",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentRequest",
                "&",
                "request",
                ")",
                "{",
                "os",
                "<<",
                "\"Request: \"",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Bot Alias: \"",
                "<<",
                "request",
                ".",
                "GetBotAlias",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Bot Name : \"",
                "<<",
                "request",
                ".",
                "GetBotName",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "std",
                "::",
                "stringstream",
                "ss",
                ";",
                "ss",
                "<<",
                "request",
                ".",
                "GetBody",
                "(",
                ")",
                "->",
                "rdbuf",
                "(",
                ")",
                ";",
                "os",
                "<<",
                "\"Input data: \"",
                "<<",
                "ss",
                ".",
                "str",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"User Id: \"",
                "<<",
                "request",
                ".",
                "GetUserId",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Accept Type: \"",
                "<<",
                "request",
                ".",
                "GetAccept",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Content Type: \"",
                "<<",
                "request",
                ".",
                "GetContentType",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "return",
                "os",
                ";",
                "}"
            ],
            "name": "operator<<",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": "std::ostream &(std::ostream &, const Aws::LexRuntimeService::Model::PostContentRequest &)"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "FUNCTION_DECL",
            "line": 25,
            "line_tokens": [
                "LexConfiguration",
                "LoadLexParameters",
                "(",
                "const",
                "Client",
                "::",
                "ParameterReaderInterface",
                "&",
                "parameter_interface",
                ")",
                "{",
                "LexConfiguration",
                "lex_configuration",
                ";",
                "bool",
                "is_invalid",
                "=",
                "false",
                ";",
                "is_invalid",
                "|=",
                "static_cast",
                "<",
                "bool",
                ">",
                "(",
                "parameter_interface",
                ".",
                "ReadParam",
                "(",
                "ParameterPath",
                "(",
                "kBotAliasKey",
                ")",
                ",",
                "lex_configuration",
                ".",
                "bot_alias",
                ")",
                ")",
                ";",
                "is_invalid",
                "|=",
                "static_cast",
                "<",
                "bool",
                ">",
                "(",
                "parameter_interface",
                ".",
                "ReadParam",
                "(",
                "ParameterPath",
                "(",
                "kBotNameKey",
                ")",
                ",",
                "lex_configuration",
                ".",
                "bot_name",
                ")",
                ")",
                ";",
                "is_invalid",
                "|=",
                "static_cast",
                "<",
                "bool",
                ">",
                "(",
                "parameter_interface",
                ".",
                "ReadParam",
                "(",
                "ParameterPath",
                "(",
                "kUserIdKey",
                ")",
                ",",
                "lex_configuration",
                ".",
                "user_id",
                ")",
                ")",
                ";",
                "if",
                "(",
                "is_invalid",
                ")",
                "{",
                "AWS_LOG_INFO",
                "(",
                "__func__",
                ",",
                "\"Lex configuration not fully specified\"",
                ")",
                ";",
                "throw",
                "std",
                "::",
                "invalid_argument",
                "(",
                "\"Lex configuration not fully specified\"",
                ")",
                ";",
                "}",
                "return",
                "lex_configuration",
                ";",
                "}"
            ],
            "name": "LoadLexParameters",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": "Aws::Lex::LexConfiguration (const Client::ParameterReaderInterface &)"
        }
    ],
    "FUNCTION_PARAMETER": [
        {
            "declaration_filepath": "include/lex_node/lex_param_helper.h",
            "kind": "FUNCTION_PARAMETER",
            "line": 29,
            "line_tokens": [
                "const",
                "Client",
                "::",
                "ParameterReaderInterface",
                "&",
                "parameter_interface"
            ],
            "name": "parameter_interface",
            "src_file_path": "include/lex_node/lex_param_helper.h",
            "token_end_col": 96,
            "token_start_col": 36,
            "var_type": "Client::ParameterReaderInterface &"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "FUNCTION_PARAMETER",
            "line": 110,
            "line_tokens": [
                "LexConfiguration",
                "&",
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 41,
            "token_start_col": 5,
            "var_type": "Aws::Lex::LexConfiguration &"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "FUNCTION_PARAMETER",
            "line": 101,
            "line_tokens": [
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response"
            ],
            "name": "response",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 83,
            "token_start_col": 26,
            "var_type": "lex_common_msgs::AudioTextConversationResponse &"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "FUNCTION_PARAMETER",
            "line": 100,
            "line_tokens": [
                "lex_common_msgs",
                "::",
                "AudioTextConversationRequest",
                "&",
                "request"
            ],
            "name": "request",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 81,
            "token_start_col": 26,
            "var_type": "lex_common_msgs::AudioTextConversationRequest &"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_PARAMETER",
            "line": 200,
            "line_tokens": [
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response"
            ],
            "name": "response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 90,
            "token_start_col": 33,
            "var_type": "lex_common_msgs::AudioTextConversationResponse &"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_PARAMETER",
            "line": 199,
            "line_tokens": [
                "lex_common_msgs",
                "::",
                "AudioTextConversationRequest",
                "&",
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 88,
            "token_start_col": 33,
            "var_type": "lex_common_msgs::AudioTextConversationRequest &"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_PARAMETER",
            "line": 192,
            "line_tokens": [
                "LexConfiguration",
                "&",
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 39,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexConfiguration &"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_PARAMETER",
            "line": 130,
            "line_tokens": [
                "const",
                "LexConfiguration",
                "&",
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 45,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexConfiguration &"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_PARAMETER",
            "line": 129,
            "line_tokens": [
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response"
            ],
            "name": "response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 60,
            "token_start_col": 3,
            "var_type": "lex_common_msgs::AudioTextConversationResponse &"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_PARAMETER",
            "line": 128,
            "line_tokens": [
                "lex_common_msgs",
                "::",
                "AudioTextConversationRequest",
                "&",
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 58,
            "token_start_col": 3,
            "var_type": "lex_common_msgs::AudioTextConversationRequest &"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_PARAMETER",
            "line": 80,
            "line_tokens": [
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response"
            ],
            "name": "response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 73,
            "token_start_col": 16,
            "var_type": "lex_common_msgs::AudioTextConversationResponse &"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_PARAMETER",
            "line": 79,
            "line_tokens": [
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentResult",
                "&",
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 73,
            "token_start_col": 16,
            "var_type": "Aws::LexRuntimeService::Model::PostContentResult &"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_PARAMETER",
            "line": 55,
            "line_tokens": [
                "const",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentResult",
                "&",
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 90,
            "token_start_col": 27,
            "var_type": "Aws::LexRuntimeService::Model::PostContentResult &"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "FUNCTION_PARAMETER",
            "line": 40,
            "line_tokens": [
                "const",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentRequest",
                "&",
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 92,
            "token_start_col": 27,
            "var_type": "Aws::LexRuntimeService::Model::PostContentRequest &"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "FUNCTION_PARAMETER",
            "line": 25,
            "line_tokens": [
                "const",
                "Client",
                "::",
                "ParameterReaderInterface",
                "&",
                "parameter_interface"
            ],
            "name": "parameter_interface",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 96,
            "token_start_col": 36,
            "var_type": "Client::ParameterReaderInterface &"
        }
    ],
    "HEADER_FILE": [
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 18,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "lex",
                "/",
                "LexRuntimeServiceClient",
                ".",
                "h",
                ">"
            ],
            "name": "aws/lex/LexRuntimeServiceClient.h",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 45,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 19,
            "line_tokens": [
                "#",
                "include",
                "<",
                "lex_common_msgs",
                "/",
                "AudioTextConversation",
                ".",
                "h",
                ">"
            ],
            "name": "lex_common_msgs/AudioTextConversation.h",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 51,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 20,
            "line_tokens": [
                "#",
                "include",
                "<",
                "lex_common_msgs",
                "/",
                "AudioTextConversationRequest",
                ".",
                "h",
                ">"
            ],
            "name": "lex_common_msgs/AudioTextConversationRequest.h",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 58,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 21,
            "line_tokens": [
                "#",
                "include",
                "<",
                "lex_common_msgs",
                "/",
                "AudioTextConversationResponse",
                ".",
                "h",
                ">"
            ],
            "name": "lex_common_msgs/AudioTextConversationResponse.h",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 59,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 22,
            "line_tokens": [
                "#",
                "include",
                "<",
                "lex_node",
                "/",
                "lex_param_helper",
                ".",
                "h",
                ">"
            ],
            "name": "lex_node/lex_param_helper.h",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 39,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 18,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws_common",
                "/",
                "sdk_utils",
                "/",
                "parameter_reader",
                ".",
                "h",
                ">"
            ],
            "name": "aws_common/sdk_utils/parameter_reader.h",
            "src_file_path": "include/lex_node/lex_param_helper.h",
            "token_end_col": 51,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 19,
            "line_tokens": [
                "#",
                "include",
                "<",
                "lex_node",
                "/",
                "lex_configuration",
                ".",
                "h",
                ">"
            ],
            "name": "lex_node/lex_configuration.h",
            "src_file_path": "include/lex_node/lex_param_helper.h",
            "token_end_col": 40,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 23,
            "line_tokens": [
                "#",
                "include",
                "<",
                "ros",
                "/",
                "ros",
                ".",
                "h",
                ">"
            ],
            "name": "ros/ros.h",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 21,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 24,
            "line_tokens": [
                "#",
                "include",
                "<",
                "ros",
                "/",
                "spinner",
                ".",
                "h",
                ">"
            ],
            "name": "ros/spinner.h",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 25,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 16,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "core",
                "/",
                "Aws",
                ".",
                "h",
                ">"
            ],
            "name": "aws/core/Aws.h",
            "src_file_path": "src/main.cpp",
            "token_end_col": 26,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 17,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "core",
                "/",
                "config",
                "/",
                "AWSProfileConfigLoader",
                ".",
                "h",
                ">"
            ],
            "name": "aws/core/config/AWSProfileConfigLoader.h",
            "src_file_path": "src/main.cpp",
            "token_end_col": 52,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 18,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "core",
                "/",
                "utils",
                "/",
                "logging",
                "/",
                "AWSLogging",
                ".",
                "h",
                ">"
            ],
            "name": "aws/core/utils/logging/AWSLogging.h",
            "src_file_path": "src/main.cpp",
            "token_end_col": 47,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 19,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "core",
                "/",
                "utils",
                "/",
                "logging",
                "/",
                "LogMacros",
                ".",
                "h",
                ">"
            ],
            "name": "aws/core/utils/logging/LogMacros.h",
            "src_file_path": "src/main.cpp",
            "token_end_col": 46,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 20,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws_ros1_common",
                "/",
                "sdk_utils",
                "/",
                "logging",
                "/",
                "aws_ros_logger",
                ".",
                "h",
                ">"
            ],
            "name": "aws_ros1_common/sdk_utils/logging/aws_ros_logger.h",
            "src_file_path": "src/main.cpp",
            "token_end_col": 62,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 21,
            "line_tokens": [
                "#",
                "include",
                "<",
                "lex_node",
                "/",
                "lex_node",
                ".",
                "h",
                ">"
            ],
            "name": "lex_node/lex_node.h",
            "src_file_path": "src/main.cpp",
            "token_end_col": 31,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 22,
            "line_tokens": [
                "#",
                "include",
                "<",
                "ros",
                "/",
                "ros",
                ".",
                "h",
                ">"
            ],
            "name": "ros/ros.h",
            "src_file_path": "src/main.cpp",
            "token_end_col": 21,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 16,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "core",
                "/",
                "Aws",
                ".",
                "h",
                ">"
            ],
            "name": "aws/core/Aws.h",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 26,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 17,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "core",
                "/",
                "utils",
                "/",
                "HashingUtils",
                ".",
                "h",
                ">"
            ],
            "name": "aws/core/utils/HashingUtils.h",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 41,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 18,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "core",
                "/",
                "utils",
                "/",
                "Outcome",
                ".",
                "h",
                ">"
            ],
            "name": "aws/core/utils/Outcome.h",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 36,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 19,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "core",
                "/",
                "utils",
                "/",
                "json",
                "/",
                "JsonSerializer",
                ".",
                "h",
                ">"
            ],
            "name": "aws/core/utils/json/JsonSerializer.h",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 48,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 20,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "core",
                "/",
                "utils",
                "/",
                "logging",
                "/",
                "LogMacros",
                ".",
                "h",
                ">"
            ],
            "name": "aws/core/utils/logging/LogMacros.h",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 46,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 21,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "core",
                "/",
                "utils",
                "/",
                "memory",
                "/",
                "stl",
                "/",
                "AWSString",
                ".",
                "h",
                ">"
            ],
            "name": "aws/core/utils/memory/stl/AWSString.h",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 49,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 22,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "lex",
                "/",
                "model",
                "/",
                "PostContentRequest",
                ".",
                "h",
                ">"
            ],
            "name": "aws/lex/model/PostContentRequest.h",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 46,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 23,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "lex",
                "/",
                "model",
                "/",
                "PostContentResult",
                ".",
                "h",
                ">"
            ],
            "name": "aws/lex/model/PostContentResult.h",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 45,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 24,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "lex",
                "/",
                "model",
                "/",
                "PostTextRequest",
                ".",
                "h",
                ">"
            ],
            "name": "aws/lex/model/PostTextRequest.h",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 43,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 25,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "lex",
                "/",
                "model",
                "/",
                "PostTextResult",
                ".",
                "h",
                ">"
            ],
            "name": "aws/lex/model/PostTextResult.h",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 42,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 26,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws_common",
                "/",
                "sdk_utils",
                "/",
                "client_configuration_provider",
                ".",
                "h",
                ">"
            ],
            "name": "aws_common/sdk_utils/client_configuration_provider.h",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 64,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 27,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws_ros1_common",
                "/",
                "sdk_utils",
                "/",
                "ros1_node_parameter_reader",
                ".",
                "h",
                ">"
            ],
            "name": "aws_ros1_common/sdk_utils/ros1_node_parameter_reader.h",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 66,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 28,
            "line_tokens": [
                "#",
                "include",
                "<",
                "lex_common_msgs",
                "/",
                "KeyValue",
                ".",
                "h",
                ">"
            ],
            "name": "lex_common_msgs/KeyValue.h",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 38,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 29,
            "line_tokens": [
                "#",
                "include",
                "<",
                "lex_node",
                "/",
                "lex_node",
                ".",
                "h",
                ">"
            ],
            "name": "lex_node/lex_node.h",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 31,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 34,
            "line_tokens": [
                "#",
                "include",
                "<",
                "regex",
                ">"
            ],
            "name": "regex",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 17,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 16,
            "line_tokens": [
                "#",
                "include",
                "<",
                "aws",
                "/",
                "core",
                "/",
                "utils",
                "/",
                "logging",
                "/",
                "LogMacros",
                ".",
                "h",
                ">"
            ],
            "name": "aws/core/utils/logging/LogMacros.h",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 46,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "",
            "kind": "HEADER_FILE",
            "line": 17,
            "line_tokens": [
                "#",
                "include",
                "<",
                "lex_node",
                "/",
                "lex_param_helper",
                ".",
                "h",
                ">"
            ],
            "name": "lex_node/lex_param_helper.h",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 39,
            "token_start_col": 1,
            "var_type": ""
        }
    ],
    "MACRO_DEFINITION": [
        {
            "declaration_filepath": "",
            "kind": "MACRO_DEFINITION",
            "line": 27,
            "line_tokens": [
                "LEX_CONFIGURATION_PATH",
                "\"lex_configuration/\""
            ],
            "name": "LEX_CONFIGURATION_PATH",
            "src_file_path": "include/lex_node/lex_configuration.h",
            "token_end_col": 52,
            "token_start_col": 9,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "MACRO_DEFINITION",
            "line": 29,
            "line_tokens": [
                "LEX_CONFIGURATION_PATH"
            ],
            "name": "LEX_CONFIGURATION_PATH",
            "src_file_path": "include/lex_node/lex_configuration.h",
            "token_end_col": 53,
            "token_start_col": 31,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "MACRO_DEFINITION",
            "line": 30,
            "line_tokens": [
                "LEX_CONFIGURATION_PATH"
            ],
            "name": "LEX_CONFIGURATION_PATH",
            "src_file_path": "include/lex_node/lex_configuration.h",
            "token_end_col": 54,
            "token_start_col": 32,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "MACRO_DEFINITION",
            "line": 31,
            "line_tokens": [
                "LEX_CONFIGURATION_PATH"
            ],
            "name": "LEX_CONFIGURATION_PATH",
            "src_file_path": "include/lex_node/lex_configuration.h",
            "token_end_col": 55,
            "token_start_col": 33,
            "var_type": ""
        }
    ],
    "MEMBER_REF": [
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "MEMBER_REF",
            "line": 183,
            "line_tokens": [
                "node_handle_"
            ],
            "name": "node_handle_",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 34,
            "token_start_col": 22,
            "var_type": "ros::NodeHandle"
        }
    ],
    "MEMBER_REF_EXPR": [
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 128,
            "line_tokens": [
                "node_handle_"
            ],
            "name": "node_handle_",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 62,
            "token_start_col": 50,
            "var_type": "ros::NodeHandle"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 120,
            "line_tokens": [
                "lex_runtime_client_"
            ],
            "name": "lex_runtime_client_",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 31,
            "token_start_col": 12,
            "var_type": "const std::shared_ptr<Aws::LexRuntimeService::LexRuntimeServiceClient>"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/service_server.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 0,
            "line_tokens": [
                "lex_server_"
            ],
            "name": "operator void *",
            "src_file_path": "",
            "token_end_col": 0,
            "token_start_col": 0,
            "var_type": "<bound member function type>"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 90,
            "line_tokens": [
                "lex_server_"
            ],
            "name": "lex_server_",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 77,
            "token_start_col": 66,
            "var_type": "ros::ServiceServer"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 207,
            "line_tokens": [
                "lex_runtime_client_"
            ],
            "name": "lex_runtime_client_",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 61,
            "var_type": "std::shared_ptr<Aws::LexRuntimeService::LexRuntimeServiceClient>"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 207,
            "line_tokens": [
                "lex_configuration_"
            ],
            "name": "lex_configuration_",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 59,
            "token_start_col": 41,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 202,
            "line_tokens": [
                "lex_runtime_client_"
            ],
            "name": "lex_runtime_client_",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 27,
            "token_start_col": 8,
            "var_type": "std::shared_ptr<Aws::LexRuntimeService::LexRuntimeServiceClient>"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 196,
            "line_tokens": [
                "lex_runtime_client_"
            ],
            "name": "lex_runtime_client_",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 22,
            "token_start_col": 3,
            "var_type": "std::shared_ptr<Aws::LexRuntimeService::LexRuntimeServiceClient>"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 195,
            "line_tokens": [
                "lex_configuration_"
            ],
            "name": "lex_configuration_",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 21,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/node_handle.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 188,
            "line_tokens": [
                "node_handle_",
                ".",
                "advertiseService",
                "<",
                ">"
            ],
            "name": "advertiseService",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 36,
            "token_start_col": 5,
            "var_type": "<bound member function type>"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 188,
            "line_tokens": [
                "node_handle_"
            ],
            "name": "node_handle_",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 17,
            "token_start_col": 5,
            "var_type": "ros::NodeHandle"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 187,
            "line_tokens": [
                "lex_server_"
            ],
            "name": "lex_server_",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 14,
            "token_start_col": 3,
            "var_type": "ros::ServiceServer"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 179,
            "line_tokens": [
                "lex_node",
                ".",
                "Init"
            ],
            "name": "Init",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 16,
            "token_start_col": 3,
            "var_type": "<bound member function type>"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 178,
            "line_tokens": [
                "lex_node",
                ".",
                "ConfigureAwsLex"
            ],
            "name": "ConfigureAwsLex",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 27,
            "token_start_col": 3,
            "var_type": "<bound member function type>"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationRequest.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 146,
            "line_tokens": [
                "request",
                ".",
                "text_request"
            ],
            "name": "text_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 39,
            "token_start_col": 19,
            "var_type": "lex_common_msgs::AudioTextConversationRequest_<std::allocator<void> >::_text_request_type"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/audio_common_msgs/AudioData.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 143,
            "line_tokens": [
                "request",
                ".",
                "audio_request",
                ".",
                "data"
            ],
            "name": "data",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 77,
            "token_start_col": 51,
            "var_type": "audio_common_msgs::AudioData_<std::allocator<void> >::_data_type"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationRequest.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 143,
            "line_tokens": [
                "request",
                ".",
                "audio_request"
            ],
            "name": "audio_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 72,
            "token_start_col": 51,
            "var_type": "lex_common_msgs::AudioTextConversationRequest_<std::allocator<void> >::_audio_request_type"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/audio_common_msgs/AudioData.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 143,
            "line_tokens": [
                "request",
                ".",
                "audio_request",
                ".",
                "data"
            ],
            "name": "data",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 41,
            "token_start_col": 15,
            "var_type": "audio_common_msgs::AudioData_<std::allocator<void> >::_data_type"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationRequest.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 143,
            "line_tokens": [
                "request",
                ".",
                "audio_request"
            ],
            "name": "audio_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 36,
            "token_start_col": 15,
            "var_type": "lex_common_msgs::AudioTextConversationRequest_<std::allocator<void> >::_audio_request_type"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/audio_common_msgs/AudioData.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 142,
            "line_tokens": [
                "request",
                ".",
                "audio_request",
                ".",
                "data"
            ],
            "name": "data",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 34,
            "token_start_col": 8,
            "var_type": "audio_common_msgs::AudioData_<std::allocator<void> >::_data_type"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationRequest.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 142,
            "line_tokens": [
                "request",
                ".",
                "audio_request"
            ],
            "name": "audio_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 29,
            "token_start_col": 8,
            "var_type": "lex_common_msgs::AudioTextConversationRequest_<std::allocator<void> >::_audio_request_type"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationRequest.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 139,
            "line_tokens": [
                "request",
                ".",
                "content_type"
            ],
            "name": "content_type",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 59,
            "token_start_col": 39,
            "var_type": "lex_common_msgs::AudioTextConversationRequest_<std::allocator<void> >::_content_type_type"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 137,
            "line_tokens": [
                "lex_configuration",
                ".",
                "user_id"
            ],
            "name": "user_id",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 42,
            "token_start_col": 17,
            "var_type": "const std::string"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationRequest.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 136,
            "line_tokens": [
                "request",
                ".",
                "accept_type"
            ],
            "name": "accept_type",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 36,
            "token_start_col": 17,
            "var_type": "lex_common_msgs::AudioTextConversationRequest_<std::allocator<void> >::_accept_type_type"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 135,
            "line_tokens": [
                "lex_configuration",
                ".",
                "bot_name"
            ],
            "name": "bot_name",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 44,
            "token_start_col": 18,
            "var_type": "const std::string"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 134,
            "line_tokens": [
                "lex_configuration",
                ".",
                "bot_alias"
            ],
            "name": "bot_alias",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 64,
            "token_start_col": 37,
            "var_type": "const std::string"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/KeyValue.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 108,
            "line_tokens": [
                "response_it",
                "->",
                "value"
            ],
            "name": "value",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 25,
            "token_start_col": 7,
            "var_type": "lex_common_msgs::KeyValue_<std::allocator<void> >::_value_type"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/KeyValue.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 107,
            "line_tokens": [
                "response_it",
                "->",
                "key"
            ],
            "name": "key",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 23,
            "token_start_col": 7,
            "var_type": "lex_common_msgs::KeyValue_<std::allocator<void> >::_key_type"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationResponse.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 105,
            "line_tokens": [
                "response",
                ".",
                "slots"
            ],
            "name": "slots",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 38,
            "token_start_col": 24,
            "var_type": "lex_common_msgs::AudioTextConversationResponse_<std::allocator<void> >::_slots_type"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationResponse.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 104,
            "line_tokens": [
                "response",
                ".",
                "slots"
            ],
            "name": "slots",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 19,
            "token_start_col": 5,
            "var_type": "lex_common_msgs::AudioTextConversationResponse_<std::allocator<void> >::_slots_type"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationResponse.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 94,
            "line_tokens": [
                "response",
                ".",
                "dialog_state"
            ],
            "name": "dialog_state",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 24,
            "token_start_col": 3,
            "var_type": "lex_common_msgs::AudioTextConversationResponse_<std::allocator<void> >::_dialog_state_type"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationResponse.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 92,
            "line_tokens": [
                "response",
                ".",
                "intent_name"
            ],
            "name": "intent_name",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 23,
            "token_start_col": 3,
            "var_type": "lex_common_msgs::AudioTextConversationResponse_<std::allocator<void> >::_intent_name_type"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/audio_common_msgs/AudioData.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 89,
            "line_tokens": [
                "response",
                ".",
                "audio_response",
                ".",
                "data"
            ],
            "name": "data",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 86,
            "token_start_col": 58,
            "var_type": "audio_common_msgs::AudioData_<std::allocator<void> >::_data_type"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationResponse.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 89,
            "line_tokens": [
                "response",
                ".",
                "audio_response"
            ],
            "name": "audio_response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 81,
            "token_start_col": 58,
            "var_type": "lex_common_msgs::AudioTextConversationResponse_<std::allocator<void> >::_audio_response_type"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/audio_common_msgs/AudioData.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 87,
            "line_tokens": [
                "response",
                ".",
                "audio_response",
                ".",
                "data"
            ],
            "name": "data",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 31,
            "token_start_col": 3,
            "var_type": "audio_common_msgs::AudioData_<std::allocator<void> >::_data_type"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationResponse.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 87,
            "line_tokens": [
                "response",
                ".",
                "audio_response"
            ],
            "name": "audio_response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 26,
            "token_start_col": 3,
            "var_type": "lex_common_msgs::AudioTextConversationResponse_<std::allocator<void> >::_audio_response_type"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationResponse.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 84,
            "line_tokens": [
                "response",
                ".",
                "text_response"
            ],
            "name": "text_response",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 25,
            "token_start_col": 3,
            "var_type": "lex_common_msgs::AudioTextConversationResponse_<std::allocator<void> >::_text_response_type"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationResponse.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 83,
            "line_tokens": [
                "response",
                ".",
                "message_format_type"
            ],
            "name": "message_format_type",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 31,
            "token_start_col": 3,
            "var_type": "lex_common_msgs::AudioTextConversationResponse_<std::allocator<void> >::_message_format_type_type"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 31,
            "line_tokens": [
                "lex_configuration",
                ".",
                "user_id"
            ],
            "name": "user_id",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 117,
            "token_start_col": 92,
            "var_type": "std::string"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 30,
            "line_tokens": [
                "lex_configuration",
                ".",
                "bot_name"
            ],
            "name": "bot_name",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 119,
            "token_start_col": 93,
            "var_type": "std::string"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "MEMBER_REF_EXPR",
            "line": 29,
            "line_tokens": [
                "lex_configuration",
                ".",
                "bot_alias"
            ],
            "name": "bot_alias",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 121,
            "token_start_col": 94,
            "var_type": "std::string"
        }
    ],
    "NAMESPACE": [
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "NAMESPACE",
            "line": 20,
            "line_tokens": [
                "namespace",
                "Aws",
                "{",
                "namespace",
                "Lex",
                "{",
                "/**\n * \\defgroup ROS parameter keys for lex configuration.\n */",
                "/**@{*/",
                "#",
                "define",
                "LEX_CONFIGURATION_PATH",
                "\"lex_configuration/\"",
                "constexpr",
                "char",
                "kUserIdKey",
                "[",
                "]",
                "=",
                "LEX_CONFIGURATION_PATH",
                "\"user_id\"",
                ";",
                "constexpr",
                "char",
                "kBotNameKey",
                "[",
                "]",
                "=",
                "LEX_CONFIGURATION_PATH",
                "\"bot_name\"",
                ";",
                "constexpr",
                "char",
                "kBotAliasKey",
                "[",
                "]",
                "=",
                "LEX_CONFIGURATION_PATH",
                "\"bot_alias\"",
                ";",
                "/** @}*/",
                "/**\n * Configuration to make calls to lex.\n */",
                "struct",
                "LexConfiguration",
                "{",
                "/**\n   * The user id to call lex with. Unique per caller.\n   */",
                "std",
                "::",
                "string",
                "user_id",
                ";",
                "/**\n   * The lex bot to use.\n   */",
                "std",
                "::",
                "string",
                "bot_name",
                ";",
                "/**\n   * The lex alias of the bot to use.\n   */",
                "std",
                "::",
                "string",
                "bot_alias",
                ";",
                "}",
                ";",
                "}",
                "// namespace Lex",
                "}"
            ],
            "name": "Aws",
            "src_file_path": "include/lex_node/lex_configuration.h",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "NAMESPACE",
            "line": 21,
            "line_tokens": [
                "namespace",
                "Lex",
                "{",
                "/**\n * \\defgroup ROS parameter keys for lex configuration.\n */",
                "/**@{*/",
                "#",
                "define",
                "LEX_CONFIGURATION_PATH",
                "\"lex_configuration/\"",
                "constexpr",
                "char",
                "kUserIdKey",
                "[",
                "]",
                "=",
                "LEX_CONFIGURATION_PATH",
                "\"user_id\"",
                ";",
                "constexpr",
                "char",
                "kBotNameKey",
                "[",
                "]",
                "=",
                "LEX_CONFIGURATION_PATH",
                "\"bot_name\"",
                ";",
                "constexpr",
                "char",
                "kBotAliasKey",
                "[",
                "]",
                "=",
                "LEX_CONFIGURATION_PATH",
                "\"bot_alias\"",
                ";",
                "/** @}*/",
                "/**\n * Configuration to make calls to lex.\n */",
                "struct",
                "LexConfiguration",
                "{",
                "/**\n   * The user id to call lex with. Unique per caller.\n   */",
                "std",
                "::",
                "string",
                "user_id",
                ";",
                "/**\n   * The lex bot to use.\n   */",
                "std",
                "::",
                "string",
                "bot_name",
                ";",
                "/**\n   * The lex alias of the bot to use.\n   */",
                "std",
                "::",
                "string",
                "bot_alias",
                ";",
                "}",
                ";",
                "}"
            ],
            "name": "Lex",
            "src_file_path": "include/lex_node/lex_configuration.h",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_param_helper.h",
            "kind": "NAMESPACE",
            "line": 21,
            "line_tokens": [
                "namespace",
                "Aws",
                "{",
                "namespace",
                "Lex",
                "{",
                "/**\n * Load lex parameters from ros param server.\n *\n * @param parameter_interface to retrieve the parameters from.\n */",
                "LexConfiguration",
                "LoadLexParameters",
                "(",
                "const",
                "Client",
                "::",
                "ParameterReaderInterface",
                "&",
                "parameter_interface",
                ")",
                ";",
                "}",
                "// namespace Lex",
                "}"
            ],
            "name": "Aws",
            "src_file_path": "include/lex_node/lex_param_helper.h",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_param_helper.h",
            "kind": "NAMESPACE",
            "line": 22,
            "line_tokens": [
                "namespace",
                "Lex",
                "{",
                "/**\n * Load lex parameters from ros param server.\n *\n * @param parameter_interface to retrieve the parameters from.\n */",
                "LexConfiguration",
                "LoadLexParameters",
                "(",
                "const",
                "Client",
                "::",
                "ParameterReaderInterface",
                "&",
                "parameter_interface",
                ")",
                ";",
                "}"
            ],
            "name": "Lex",
            "src_file_path": "include/lex_node/lex_param_helper.h",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 26,
            "line_tokens": [
                "namespace",
                "Aws",
                "{",
                "namespace",
                "Lex",
                "{",
                "/**\n * Aws memory allocation tag.\n */",
                "static",
                "const",
                "char",
                "*",
                "kAllocationTag",
                "=",
                "\"lex\"",
                ";",
                "class",
                "LexNode",
                ";",
                "/**\n * Build a lex node for ros/aws use.\n *\n * @return a fully ros/aws configured lex node.\n */",
                "LexNode",
                "BuildLexNode",
                "(",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Client",
                "::",
                "ParameterReaderInterface",
                ">",
                "params",
                "=",
                "nullptr",
                ")",
                ";",
                "/**\n * LexNode is responsible for providing ROS API's and configuration for Amazon Lex.\n * The lex node will work on each incoming message serially and respond with the lex info.\n * @todo decide how the lex node will handle multiple requests.\n */",
                "class",
                "LexNode",
                "{",
                "private",
                ":",
                "/**\n   * The ros server for lex requests.\n   */",
                "ros",
                "::",
                "ServiceServer",
                "lex_server_",
                ";",
                "/**\n   * The Lex specific configuration for the amazon bot.\n   */",
                "LexConfiguration",
                "lex_configuration_",
                ";",
                "/**\n   * The lex runtime client to use for lex api calls.\n   */",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "lex_runtime_client_",
                ";",
                "/**\n   * The ros node handle.\n   */",
                "ros",
                "::",
                "NodeHandle",
                "node_handle_",
                ";",
                "public",
                ":",
                "/**\n   * Constructor.\n   */",
                "LexNode",
                "(",
                ")",
                ";",
                "/**\n   * Destructor.\n   */",
                "~",
                "LexNode",
                "(",
                ")",
                "=",
                "default",
                ";",
                "/**\n   * Initialize the lex node.\n   */",
                "void",
                "Init",
                "(",
                ")",
                ";",
                "/**\n   * Query if the service is in a valid state or not\n   */",
                "bool",
                "IsServiceValid",
                "(",
                ")",
                "{",
                "return",
                "(",
                "nullptr",
                "!=",
                "static_cast",
                "<",
                "void",
                "*",
                ">",
                "(",
                "lex_server_",
                ")",
                ")",
                ";",
                "}",
                "/**\n   * Service callback for lex. Only allow one interaction with Lex at a time. If a new request comes\n   * in, fail the last request, then make a new request.\n   *\n   * @param request to handle\n   * @param response to fill\n   * @return true if the service request was successful\n   */",
                "bool",
                "LexServerCallback",
                "(",
                "lex_common_msgs",
                "::",
                "AudioTextConversationRequest",
                "&",
                "request",
                ",",
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response",
                ")",
                ";",
                "/**\n   * Configure the lex node with lex client and config.\n   *\n   * @param lex_configuration message tags for lex calls\n   * @param lex_runtime_client to call lex\n   */",
                "void",
                "ConfigureAwsLex",
                "(",
                "LexConfiguration",
                "&",
                "lex_configuration",
                ",",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "lex_runtime_client",
                ")",
                ";",
                "/**\n   * Return pointer to the Lex runtime client instance of this node\n   *\n   * @return pointer this node's Lex runtime client instance\n   */",
                "std",
                "::",
                "weak_ptr",
                "<",
                "const",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "GetLexRuntimeClient",
                "(",
                ")",
                "const",
                "{",
                "return",
                "lex_runtime_client_",
                ";",
                "}",
                "/**\n   * Conversion function since in ROS2, this class will inherit from Node.\n   *\n   * @return this functions node handle.\n   */",
                "explicit",
                "operator",
                "ros",
                "::",
                "NodeHandle",
                "&",
                "(",
                ")",
                "{",
                "return",
                "node_handle_",
                ";",
                "}",
                "}",
                ";",
                "}",
                "// namespace Lex",
                "}"
            ],
            "name": "Aws",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 27,
            "line_tokens": [
                "namespace",
                "Lex",
                "{",
                "/**\n * Aws memory allocation tag.\n */",
                "static",
                "const",
                "char",
                "*",
                "kAllocationTag",
                "=",
                "\"lex\"",
                ";",
                "class",
                "LexNode",
                ";",
                "/**\n * Build a lex node for ros/aws use.\n *\n * @return a fully ros/aws configured lex node.\n */",
                "LexNode",
                "BuildLexNode",
                "(",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Client",
                "::",
                "ParameterReaderInterface",
                ">",
                "params",
                "=",
                "nullptr",
                ")",
                ";",
                "/**\n * LexNode is responsible for providing ROS API's and configuration for Amazon Lex.\n * The lex node will work on each incoming message serially and respond with the lex info.\n * @todo decide how the lex node will handle multiple requests.\n */",
                "class",
                "LexNode",
                "{",
                "private",
                ":",
                "/**\n   * The ros server for lex requests.\n   */",
                "ros",
                "::",
                "ServiceServer",
                "lex_server_",
                ";",
                "/**\n   * The Lex specific configuration for the amazon bot.\n   */",
                "LexConfiguration",
                "lex_configuration_",
                ";",
                "/**\n   * The lex runtime client to use for lex api calls.\n   */",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "lex_runtime_client_",
                ";",
                "/**\n   * The ros node handle.\n   */",
                "ros",
                "::",
                "NodeHandle",
                "node_handle_",
                ";",
                "public",
                ":",
                "/**\n   * Constructor.\n   */",
                "LexNode",
                "(",
                ")",
                ";",
                "/**\n   * Destructor.\n   */",
                "~",
                "LexNode",
                "(",
                ")",
                "=",
                "default",
                ";",
                "/**\n   * Initialize the lex node.\n   */",
                "void",
                "Init",
                "(",
                ")",
                ";",
                "/**\n   * Query if the service is in a valid state or not\n   */",
                "bool",
                "IsServiceValid",
                "(",
                ")",
                "{",
                "return",
                "(",
                "nullptr",
                "!=",
                "static_cast",
                "<",
                "void",
                "*",
                ">",
                "(",
                "lex_server_",
                ")",
                ")",
                ";",
                "}",
                "/**\n   * Service callback for lex. Only allow one interaction with Lex at a time. If a new request comes\n   * in, fail the last request, then make a new request.\n   *\n   * @param request to handle\n   * @param response to fill\n   * @return true if the service request was successful\n   */",
                "bool",
                "LexServerCallback",
                "(",
                "lex_common_msgs",
                "::",
                "AudioTextConversationRequest",
                "&",
                "request",
                ",",
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response",
                ")",
                ";",
                "/**\n   * Configure the lex node with lex client and config.\n   *\n   * @param lex_configuration message tags for lex calls\n   * @param lex_runtime_client to call lex\n   */",
                "void",
                "ConfigureAwsLex",
                "(",
                "LexConfiguration",
                "&",
                "lex_configuration",
                ",",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "lex_runtime_client",
                ")",
                ";",
                "/**\n   * Return pointer to the Lex runtime client instance of this node\n   *\n   * @return pointer this node's Lex runtime client instance\n   */",
                "std",
                "::",
                "weak_ptr",
                "<",
                "const",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "GetLexRuntimeClient",
                "(",
                ")",
                "const",
                "{",
                "return",
                "lex_runtime_client_",
                ";",
                "}",
                "/**\n   * Conversion function since in ROS2, this class will inherit from Node.\n   *\n   * @return this functions node handle.\n   */",
                "explicit",
                "operator",
                "ros",
                "::",
                "NodeHandle",
                "&",
                "(",
                ")",
                "{",
                "return",
                "node_handle_",
                ";",
                "}",
                "}",
                ";",
                "}"
            ],
            "name": "Lex",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/topic.h",
            "kind": "NAMESPACE",
            "line": 128,
            "line_tokens": [
                "ros"
            ],
            "name": "ros",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 24,
            "token_start_col": 21,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 118,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 26,
            "token_start_col": 23,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 111,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 24,
            "token_start_col": 21,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversation.h",
            "kind": "NAMESPACE",
            "line": 101,
            "line_tokens": [
                "lex_common_msgs"
            ],
            "name": "lex_common_msgs",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 41,
            "token_start_col": 26,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversation.h",
            "kind": "NAMESPACE",
            "line": 100,
            "line_tokens": [
                "lex_common_msgs"
            ],
            "name": "lex_common_msgs",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 41,
            "token_start_col": 26,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/topic.h",
            "kind": "NAMESPACE",
            "line": 69,
            "line_tokens": [
                "ros"
            ],
            "name": "ros",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 6,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 64,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 22,
            "token_start_col": 19,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/topic.h",
            "kind": "NAMESPACE",
            "line": 54,
            "line_tokens": [
                "ros"
            ],
            "name": "ros",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 6,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 50,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/main.cpp",
            "token_end_col": 6,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/aws_ros1_common/sdk_utils/logging/aws_ros_logger.h",
            "kind": "NAMESPACE",
            "line": 49,
            "line_tokens": [
                "Logging"
            ],
            "name": "Logging",
            "src_file_path": "src/main.cpp",
            "token_end_col": 22,
            "token_start_col": 15,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 49,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/main.cpp",
            "token_end_col": 6,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/aws_ros1_common/sdk_utils/logging/aws_ros_logger.h",
            "kind": "NAMESPACE",
            "line": 48,
            "line_tokens": [],
            "name": "Logging",
            "src_file_path": "src/main.cpp",
            "token_end_col": 54,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 48,
            "line_tokens": [],
            "name": "Aws",
            "src_file_path": "src/main.cpp",
            "token_end_col": 54,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/topic.h",
            "kind": "NAMESPACE",
            "line": 46,
            "line_tokens": [
                "ros"
            ],
            "name": "ros",
            "src_file_path": "src/main.cpp",
            "token_end_col": 6,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/aws_ros1_common/sdk_utils/logging/aws_ros_logger.h",
            "kind": "NAMESPACE",
            "line": 43,
            "line_tokens": [],
            "name": "Logging",
            "src_file_path": "src/main.cpp",
            "token_end_col": 49,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 43,
            "line_tokens": [],
            "name": "Aws",
            "src_file_path": "src/main.cpp",
            "token_end_col": 49,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 40,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/main.cpp",
            "token_end_col": 6,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 39,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/main.cpp",
            "token_end_col": 6,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/aws_ros1_common/sdk_utils/logging/aws_ros_logger.h",
            "kind": "NAMESPACE",
            "line": 38,
            "line_tokens": [
                "Logging"
            ],
            "name": "Logging",
            "src_file_path": "src/main.cpp",
            "token_end_col": 40,
            "token_start_col": 33,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 38,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/main.cpp",
            "token_end_col": 24,
            "token_start_col": 21,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 38,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/main.cpp",
            "token_end_col": 8,
            "token_start_col": 5,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/aws_ros1_common/sdk_utils/logging/aws_ros_logger.h",
            "kind": "NAMESPACE",
            "line": 37,
            "line_tokens": [
                "Logging"
            ],
            "name": "Logging",
            "src_file_path": "src/main.cpp",
            "token_end_col": 22,
            "token_start_col": 15,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 37,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/main.cpp",
            "token_end_col": 6,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 35,
            "line_tokens": [
                "Lex"
            ],
            "name": "Lex",
            "src_file_path": "src/main.cpp",
            "token_end_col": 27,
            "token_start_col": 24,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "NAMESPACE",
            "line": 35,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/main.cpp",
            "token_end_col": 22,
            "token_start_col": 19,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/topic.h",
            "kind": "NAMESPACE",
            "line": 33,
            "line_tokens": [
                "ros"
            ],
            "name": "ros",
            "src_file_path": "src/main.cpp",
            "token_end_col": 6,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversation.h",
            "kind": "NAMESPACE",
            "line": 128,
            "line_tokens": [
                "ros"
            ],
            "name": "ros",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 24,
            "token_start_col": 21,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversation.h",
            "kind": "NAMESPACE",
            "line": 69,
            "line_tokens": [
                "ros"
            ],
            "name": "ros",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 6,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversation.h",
            "kind": "NAMESPACE",
            "line": 54,
            "line_tokens": [
                "ros"
            ],
            "name": "ros",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 6,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 36,
            "line_tokens": [
                "namespace",
                "Aws",
                "{",
                "namespace",
                "Lex",
                "{",
                "std",
                "::",
                "ostream",
                "&",
                "operator",
                "<<",
                "(",
                "std",
                "::",
                "ostream",
                "&",
                "os",
                ",",
                "const",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentRequest",
                "&",
                "request",
                ")",
                "{",
                "os",
                "<<",
                "\"Request: \"",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Bot Alias: \"",
                "<<",
                "request",
                ".",
                "GetBotAlias",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Bot Name : \"",
                "<<",
                "request",
                ".",
                "GetBotName",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "std",
                "::",
                "stringstream",
                "ss",
                ";",
                "ss",
                "<<",
                "request",
                ".",
                "GetBody",
                "(",
                ")",
                "->",
                "rdbuf",
                "(",
                ")",
                ";",
                "os",
                "<<",
                "\"Input data: \"",
                "<<",
                "ss",
                ".",
                "str",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"User Id: \"",
                "<<",
                "request",
                ".",
                "GetUserId",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Accept Type: \"",
                "<<",
                "request",
                ".",
                "GetAccept",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Content Type: \"",
                "<<",
                "request",
                ".",
                "GetContentType",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "return",
                "os",
                ";",
                "}",
                "std",
                "::",
                "ostream",
                "&",
                "operator",
                "<<",
                "(",
                "std",
                "::",
                "ostream",
                "&",
                "os",
                ",",
                "const",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentResult",
                "&",
                "result",
                ")",
                "{",
                "os",
                "<<",
                "\"PostContentResult: \"",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Message: \"",
                "<<",
                "result",
                ".",
                "GetMessage",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Slot to elicit: \"",
                "<<",
                "result",
                ".",
                "GetSlotToElicit",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "DialogStateMapper",
                "::",
                "GetNameForDialogState",
                ";",
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "MessageFormatTypeMapper",
                "::",
                "GetNameForMessageFormatType",
                ";",
                "os",
                "<<",
                "\"Dialog State: \"",
                "<<",
                "GetNameForDialogState",
                "(",
                "result",
                ".",
                "GetDialogState",
                "(",
                ")",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Message format type: \"",
                "<<",
                "GetNameForMessageFormatType",
                "(",
                "result",
                ".",
                "GetMessageFormat",
                "(",
                ")",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Slots: \"",
                "<<",
                "result",
                ".",
                "GetSlots",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Session Attributes: \"",
                "<<",
                "result",
                ".",
                "GetSessionAttributes",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Content Type: \"",
                "<<",
                "result",
                ".",
                "GetContentType",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Intent Name: \"",
                "<<",
                "result",
                ".",
                "GetIntentName",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "return",
                "os",
                ";",
                "}",
                "/**\n * Copy a result into an AudioTextConversionResponse.\n *\n * @param result to copy to the response\n * @param response [out] result copy\n * @return error code\n */",
                "int",
                "CopyResult",
                "(",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentResult",
                "&",
                "result",
                ",",
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response",
                ")",
                "{",
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "MessageFormatTypeMapper",
                "::",
                "GetNameForMessageFormatType",
                ";",
                "response",
                ".",
                "message_format_type",
                "=",
                "GetNameForMessageFormatType",
                "(",
                "result",
                ".",
                "GetMessageFormat",
                "(",
                ")",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "response",
                ".",
                "text_response",
                "=",
                "result",
                ".",
                "GetMessage",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "std",
                "::",
                "streampos",
                "audio_size",
                "=",
                "result",
                ".",
                "GetAudioStream",
                "(",
                ")",
                ".",
                "seekg",
                "(",
                "0",
                ",",
                "std",
                "::",
                "ios_base",
                "::",
                "end",
                ")",
                ".",
                "tellg",
                "(",
                ")",
                ";",
                "response",
                ".",
                "audio_response",
                ".",
                "data",
                "=",
                "std",
                "::",
                "vector",
                "<",
                "uint8_t",
                ">",
                "(",
                "audio_size",
                ")",
                ";",
                "result",
                ".",
                "GetAudioStream",
                "(",
                ")",
                ".",
                "seekg",
                "(",
                "0",
                ",",
                "std",
                "::",
                "ios_base",
                "::",
                "beg",
                ")",
                ";",
                "result",
                ".",
                "GetAudioStream",
                "(",
                ")",
                ".",
                "read",
                "(",
                "reinterpret_cast",
                "<",
                "char",
                "*",
                ">",
                "(",
                "&",
                "response",
                ".",
                "audio_response",
                ".",
                "data",
                "[",
                "0",
                "]",
                ")",
                ",",
                "audio_size",
                ")",
                ";",
                "response",
                ".",
                "intent_name",
                "=",
                "result",
                ".",
                "GetIntentName",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "DialogStateMapper",
                "::",
                "GetNameForDialogState",
                ";",
                "response",
                ".",
                "dialog_state",
                "=",
                "GetNameForDialogState",
                "(",
                "result",
                ".",
                "GetDialogState",
                "(",
                ")",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "std",
                "::",
                "string",
                "session_attributes",
                "=",
                "result",
                ".",
                "GetSessionAttributes",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "auto",
                "slot_byte_buffer",
                "=",
                "Aws",
                "::",
                "Utils",
                "::",
                "HashingUtils",
                "::",
                "Base64Decode",
                "(",
                "result",
                ".",
                "GetSlots",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ";",
                "Aws",
                "::",
                "String",
                "slot_string",
                "(",
                "reinterpret_cast",
                "<",
                "char",
                "*",
                ">",
                "(",
                "slot_byte_buffer",
                ".",
                "GetUnderlyingData",
                "(",
                ")",
                ")",
                ",",
                "slot_byte_buffer",
                ".",
                "GetLength",
                "(",
                ")",
                ")",
                ";",
                "auto",
                "slot_json",
                "=",
                "Aws",
                "::",
                "Utils",
                "::",
                "Json",
                "::",
                "JsonValue",
                "(",
                "slot_string",
                ")",
                ";",
                "if",
                "(",
                "slot_json",
                ".",
                "WasParseSuccessful",
                "(",
                ")",
                ")",
                "{",
                "AWS_LOGSTREAM_DEBUG",
                "(",
                "__func__",
                ",",
                "\"slot_json: \"",
                "<<",
                "slot_string",
                ")",
                ";",
                "auto",
                "view",
                "=",
                "slot_json",
                ".",
                "View",
                "(",
                ")",
                ".",
                "GetAllObjects",
                "(",
                ")",
                ";",
                "response",
                ".",
                "slots",
                "=",
                "std",
                "::",
                "vector",
                "<",
                "lex_common_msgs",
                "::",
                "KeyValue",
                ">",
                "(",
                "view",
                ".",
                "size",
                "(",
                ")",
                ")",
                ";",
                "auto",
                "response_it",
                "=",
                "response",
                ".",
                "slots",
                ".",
                "begin",
                "(",
                ")",
                ";",
                "for",
                "(",
                "auto",
                "&",
                "element",
                ":",
                "view",
                ")",
                "{",
                "response_it",
                "->",
                "key",
                "=",
                "element",
                ".",
                "first",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "response_it",
                "->",
                "value",
                "=",
                "element",
                ".",
                "second",
                ".",
                "AsString",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "response_it",
                "++",
                ";",
                "}",
                "}",
                "else",
                "{",
                "AWS_LOGSTREAM_WARN",
                "(",
                "__func__",
                ",",
                "\"Unable to parse slot string \"",
                "<<",
                "slot_string",
                ")",
                ";",
                "}",
                "return",
                "0",
                ";",
                "}",
                "/**\n * Post content to lex given an audio text conversation request and respond to it.\n * Configures the call with the lex configuration and lex_runtime_client.\n *\n * @param request to populate the lex call with\n * @param response to fill with data received by lex\n * @param lex_configuration to specify bot, and response type\n * @param lex_runtime_client to call lex with\n * @return true if the call succeeded, false otherwise\n */",
                "bool",
                "PostContent",
                "(",
                "lex_common_msgs",
                "::",
                "AudioTextConversationRequest",
                "&",
                "request",
                ",",
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response",
                ",",
                "const",
                "LexConfiguration",
                "&",
                "lex_configuration",
                ",",
                "std",
                "::",
                "shared_ptr",
                "<",
                "const",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "lex_runtime_client",
                ")",
                "{",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentRequest",
                "post_content_request",
                ";",
                "post_content_request",
                ".",
                "WithBotAlias",
                "(",
                "lex_configuration",
                ".",
                "bot_alias",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ".",
                "WithBotName",
                "(",
                "lex_configuration",
                ".",
                "bot_name",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ".",
                "WithAccept",
                "(",
                "request",
                ".",
                "accept_type",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ".",
                "WithUserId",
                "(",
                "lex_configuration",
                ".",
                "user_id",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ";",
                "post_content_request",
                ".",
                "SetContentType",
                "(",
                "request",
                ".",
                "content_type",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ";",
                "auto",
                "io_stream",
                "=",
                "Aws",
                "::",
                "MakeShared",
                "<",
                "Aws",
                "::",
                "StringStream",
                ">",
                "(",
                "kAllocationTag",
                ")",
                ";",
                "if",
                "(",
                "!",
                "request",
                ".",
                "audio_request",
                ".",
                "data",
                ".",
                "empty",
                "(",
                ")",
                ")",
                "{",
                "std",
                "::",
                "copy",
                "(",
                "request",
                ".",
                "audio_request",
                ".",
                "data",
                ".",
                "begin",
                "(",
                ")",
                ",",
                "request",
                ".",
                "audio_request",
                ".",
                "data",
                ".",
                "end",
                "(",
                ")",
                ",",
                "std",
                "::",
                "ostream_iterator",
                "<",
                "unsigned",
                "char",
                ">",
                "(",
                "*",
                "io_stream",
                ")",
                ")",
                ";",
                "}",
                "else",
                "{",
                "*",
                "io_stream",
                "<<",
                "request",
                ".",
                "text_request",
                ";",
                "}",
                "post_content_request",
                ".",
                "SetBody",
                "(",
                "io_stream",
                ")",
                ";",
                "AWS_LOGSTREAM_DEBUG",
                "(",
                "__func__",
                ",",
                "\"PostContentRequest \"",
                "<<",
                "post_content_request",
                ")",
                ";",
                "auto",
                "post_content_result",
                "=",
                "lex_runtime_client",
                "->",
                "PostContent",
                "(",
                "post_content_request",
                ")",
                ";",
                "bool",
                "is_valid",
                "=",
                "true",
                ";",
                "if",
                "(",
                "post_content_result",
                ".",
                "IsSuccess",
                "(",
                ")",
                ")",
                "{",
                "auto",
                "&",
                "result",
                "=",
                "post_content_result",
                ".",
                "GetResult",
                "(",
                ")",
                ";",
                "AWS_LOGSTREAM_DEBUG",
                "(",
                "__func__",
                ",",
                "\"PostContentResult succeeded: \"",
                "<<",
                "result",
                ".",
                "GetMessage",
                "(",
                ")",
                ")",
                ";",
                "// @todo: use response variable for errors.",
                "/* auto error_code = */",
                "CopyResult",
                "(",
                "result",
                ",",
                "response",
                ")",
                ";",
                "// if (error_code) {",
                "//    is_valid = false;",
                "// }",
                "}",
                "else",
                "{",
                "is_valid",
                "=",
                "false",
                ";",
                "AWS_LOGSTREAM_ERROR",
                "(",
                "__func__",
                ",",
                "\"PostContentResult failed: \"",
                "<<",
                "post_content_result",
                ".",
                "GetError",
                "(",
                ")",
                ".",
                "GetMessage",
                "(",
                ")",
                ")",
                ";",
                "}",
                "return",
                "is_valid",
                ";",
                "}",
                "LexNode",
                "BuildLexNode",
                "(",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Client",
                "::",
                "ParameterReaderInterface",
                ">",
                "params",
                ")",
                "{",
                "LexNode",
                "lex_node",
                ";",
                "if",
                "(",
                "nullptr",
                "==",
                "params",
                ")",
                "{",
                "params",
                "=",
                "std",
                "::",
                "make_shared",
                "<",
                "Client",
                "::",
                "Ros1NodeParameterReader",
                ">",
                "(",
                ")",
                ";",
                "}",
                "auto",
                "lex_configuration",
                "=",
                "LoadLexParameters",
                "(",
                "*",
                "params",
                ")",
                ";",
                "Client",
                "::",
                "ClientConfigurationProvider",
                "configuration_provider",
                "(",
                "params",
                ")",
                ";",
                "auto",
                "lex_runtime_client",
                "=",
                "Aws",
                "::",
                "MakeShared",
                "<",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "(",
                "kAllocationTag",
                ",",
                "configuration_provider",
                ".",
                "GetClientConfiguration",
                "(",
                ")",
                ")",
                ";",
                "lex_node",
                ".",
                "ConfigureAwsLex",
                "(",
                "lex_configuration",
                ",",
                "lex_runtime_client",
                ")",
                ";",
                "lex_node",
                ".",
                "Init",
                "(",
                ")",
                ";",
                "return",
                "lex_node",
                ";",
                "}",
                "LexNode",
                "::",
                "LexNode",
                "(",
                ")",
                ":",
                "node_handle_",
                "(",
                "\"~\"",
                ")",
                "{",
                "}",
                "void",
                "LexNode",
                "::",
                "Init",
                "(",
                ")",
                "{",
                "lex_server_",
                "=",
                "node_handle_",
                ".",
                "advertiseService",
                "<",
                ">",
                "(",
                "\"lex_conversation\"",
                ",",
                "&",
                "LexNode",
                "::",
                "LexServerCallback",
                ",",
                "this",
                ")",
                ";",
                "}",
                "void",
                "LexNode",
                "::",
                "ConfigureAwsLex",
                "(",
                "LexConfiguration",
                "&",
                "lex_configuration",
                ",",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "lex_runtime_client",
                ")",
                "{",
                "lex_configuration_",
                "=",
                "lex_configuration",
                ";",
                "lex_runtime_client_",
                "=",
                "lex_runtime_client",
                ";",
                "}",
                "bool",
                "LexNode",
                "::",
                "LexServerCallback",
                "(",
                "lex_common_msgs",
                "::",
                "AudioTextConversationRequest",
                "&",
                "request",
                ",",
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response",
                ")",
                "{",
                "if",
                "(",
                "!",
                "lex_runtime_client_",
                ")",
                "{",
                "// @todo define a new exception",
                "AWS_LOG_WARN",
                "(",
                "__func__",
                ",",
                "\"Lex runtime client is not initialized, LoadConfiguration.\"",
                ")",
                ";",
                "throw",
                "std",
                "::",
                "invalid_argument",
                "(",
                "\"Lex runtime client is not initialized, LoadConfiguration.\"",
                ")",
                ";",
                "}",
                "return",
                "PostContent",
                "(",
                "request",
                ",",
                "response",
                ",",
                "lex_configuration_",
                ",",
                "lex_runtime_client_",
                ")",
                ";",
                "}",
                "}",
                "// namespace Lex",
                "}"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 37,
            "line_tokens": [
                "namespace",
                "Lex",
                "{",
                "std",
                "::",
                "ostream",
                "&",
                "operator",
                "<<",
                "(",
                "std",
                "::",
                "ostream",
                "&",
                "os",
                ",",
                "const",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentRequest",
                "&",
                "request",
                ")",
                "{",
                "os",
                "<<",
                "\"Request: \"",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Bot Alias: \"",
                "<<",
                "request",
                ".",
                "GetBotAlias",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Bot Name : \"",
                "<<",
                "request",
                ".",
                "GetBotName",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "std",
                "::",
                "stringstream",
                "ss",
                ";",
                "ss",
                "<<",
                "request",
                ".",
                "GetBody",
                "(",
                ")",
                "->",
                "rdbuf",
                "(",
                ")",
                ";",
                "os",
                "<<",
                "\"Input data: \"",
                "<<",
                "ss",
                ".",
                "str",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"User Id: \"",
                "<<",
                "request",
                ".",
                "GetUserId",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Accept Type: \"",
                "<<",
                "request",
                ".",
                "GetAccept",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Content Type: \"",
                "<<",
                "request",
                ".",
                "GetContentType",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "return",
                "os",
                ";",
                "}",
                "std",
                "::",
                "ostream",
                "&",
                "operator",
                "<<",
                "(",
                "std",
                "::",
                "ostream",
                "&",
                "os",
                ",",
                "const",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentResult",
                "&",
                "result",
                ")",
                "{",
                "os",
                "<<",
                "\"PostContentResult: \"",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Message: \"",
                "<<",
                "result",
                ".",
                "GetMessage",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Slot to elicit: \"",
                "<<",
                "result",
                ".",
                "GetSlotToElicit",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "DialogStateMapper",
                "::",
                "GetNameForDialogState",
                ";",
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "MessageFormatTypeMapper",
                "::",
                "GetNameForMessageFormatType",
                ";",
                "os",
                "<<",
                "\"Dialog State: \"",
                "<<",
                "GetNameForDialogState",
                "(",
                "result",
                ".",
                "GetDialogState",
                "(",
                ")",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Message format type: \"",
                "<<",
                "GetNameForMessageFormatType",
                "(",
                "result",
                ".",
                "GetMessageFormat",
                "(",
                ")",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Slots: \"",
                "<<",
                "result",
                ".",
                "GetSlots",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Session Attributes: \"",
                "<<",
                "result",
                ".",
                "GetSessionAttributes",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Content Type: \"",
                "<<",
                "result",
                ".",
                "GetContentType",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "os",
                "<<",
                "\"Intent Name: \"",
                "<<",
                "result",
                ".",
                "GetIntentName",
                "(",
                ")",
                "<<",
                "std",
                "::",
                "endl",
                ";",
                "return",
                "os",
                ";",
                "}",
                "/**\n * Copy a result into an AudioTextConversionResponse.\n *\n * @param result to copy to the response\n * @param response [out] result copy\n * @return error code\n */",
                "int",
                "CopyResult",
                "(",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentResult",
                "&",
                "result",
                ",",
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response",
                ")",
                "{",
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "MessageFormatTypeMapper",
                "::",
                "GetNameForMessageFormatType",
                ";",
                "response",
                ".",
                "message_format_type",
                "=",
                "GetNameForMessageFormatType",
                "(",
                "result",
                ".",
                "GetMessageFormat",
                "(",
                ")",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "response",
                ".",
                "text_response",
                "=",
                "result",
                ".",
                "GetMessage",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "std",
                "::",
                "streampos",
                "audio_size",
                "=",
                "result",
                ".",
                "GetAudioStream",
                "(",
                ")",
                ".",
                "seekg",
                "(",
                "0",
                ",",
                "std",
                "::",
                "ios_base",
                "::",
                "end",
                ")",
                ".",
                "tellg",
                "(",
                ")",
                ";",
                "response",
                ".",
                "audio_response",
                ".",
                "data",
                "=",
                "std",
                "::",
                "vector",
                "<",
                "uint8_t",
                ">",
                "(",
                "audio_size",
                ")",
                ";",
                "result",
                ".",
                "GetAudioStream",
                "(",
                ")",
                ".",
                "seekg",
                "(",
                "0",
                ",",
                "std",
                "::",
                "ios_base",
                "::",
                "beg",
                ")",
                ";",
                "result",
                ".",
                "GetAudioStream",
                "(",
                ")",
                ".",
                "read",
                "(",
                "reinterpret_cast",
                "<",
                "char",
                "*",
                ">",
                "(",
                "&",
                "response",
                ".",
                "audio_response",
                ".",
                "data",
                "[",
                "0",
                "]",
                ")",
                ",",
                "audio_size",
                ")",
                ";",
                "response",
                ".",
                "intent_name",
                "=",
                "result",
                ".",
                "GetIntentName",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "DialogStateMapper",
                "::",
                "GetNameForDialogState",
                ";",
                "response",
                ".",
                "dialog_state",
                "=",
                "GetNameForDialogState",
                "(",
                "result",
                ".",
                "GetDialogState",
                "(",
                ")",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "std",
                "::",
                "string",
                "session_attributes",
                "=",
                "result",
                ".",
                "GetSessionAttributes",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "auto",
                "slot_byte_buffer",
                "=",
                "Aws",
                "::",
                "Utils",
                "::",
                "HashingUtils",
                "::",
                "Base64Decode",
                "(",
                "result",
                ".",
                "GetSlots",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ";",
                "Aws",
                "::",
                "String",
                "slot_string",
                "(",
                "reinterpret_cast",
                "<",
                "char",
                "*",
                ">",
                "(",
                "slot_byte_buffer",
                ".",
                "GetUnderlyingData",
                "(",
                ")",
                ")",
                ",",
                "slot_byte_buffer",
                ".",
                "GetLength",
                "(",
                ")",
                ")",
                ";",
                "auto",
                "slot_json",
                "=",
                "Aws",
                "::",
                "Utils",
                "::",
                "Json",
                "::",
                "JsonValue",
                "(",
                "slot_string",
                ")",
                ";",
                "if",
                "(",
                "slot_json",
                ".",
                "WasParseSuccessful",
                "(",
                ")",
                ")",
                "{",
                "AWS_LOGSTREAM_DEBUG",
                "(",
                "__func__",
                ",",
                "\"slot_json: \"",
                "<<",
                "slot_string",
                ")",
                ";",
                "auto",
                "view",
                "=",
                "slot_json",
                ".",
                "View",
                "(",
                ")",
                ".",
                "GetAllObjects",
                "(",
                ")",
                ";",
                "response",
                ".",
                "slots",
                "=",
                "std",
                "::",
                "vector",
                "<",
                "lex_common_msgs",
                "::",
                "KeyValue",
                ">",
                "(",
                "view",
                ".",
                "size",
                "(",
                ")",
                ")",
                ";",
                "auto",
                "response_it",
                "=",
                "response",
                ".",
                "slots",
                ".",
                "begin",
                "(",
                ")",
                ";",
                "for",
                "(",
                "auto",
                "&",
                "element",
                ":",
                "view",
                ")",
                "{",
                "response_it",
                "->",
                "key",
                "=",
                "element",
                ".",
                "first",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "response_it",
                "->",
                "value",
                "=",
                "element",
                ".",
                "second",
                ".",
                "AsString",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ";",
                "response_it",
                "++",
                ";",
                "}",
                "}",
                "else",
                "{",
                "AWS_LOGSTREAM_WARN",
                "(",
                "__func__",
                ",",
                "\"Unable to parse slot string \"",
                "<<",
                "slot_string",
                ")",
                ";",
                "}",
                "return",
                "0",
                ";",
                "}",
                "/**\n * Post content to lex given an audio text conversation request and respond to it.\n * Configures the call with the lex configuration and lex_runtime_client.\n *\n * @param request to populate the lex call with\n * @param response to fill with data received by lex\n * @param lex_configuration to specify bot, and response type\n * @param lex_runtime_client to call lex with\n * @return true if the call succeeded, false otherwise\n */",
                "bool",
                "PostContent",
                "(",
                "lex_common_msgs",
                "::",
                "AudioTextConversationRequest",
                "&",
                "request",
                ",",
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response",
                ",",
                "const",
                "LexConfiguration",
                "&",
                "lex_configuration",
                ",",
                "std",
                "::",
                "shared_ptr",
                "<",
                "const",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "lex_runtime_client",
                ")",
                "{",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentRequest",
                "post_content_request",
                ";",
                "post_content_request",
                ".",
                "WithBotAlias",
                "(",
                "lex_configuration",
                ".",
                "bot_alias",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ".",
                "WithBotName",
                "(",
                "lex_configuration",
                ".",
                "bot_name",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ".",
                "WithAccept",
                "(",
                "request",
                ".",
                "accept_type",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ".",
                "WithUserId",
                "(",
                "lex_configuration",
                ".",
                "user_id",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ";",
                "post_content_request",
                ".",
                "SetContentType",
                "(",
                "request",
                ".",
                "content_type",
                ".",
                "c_str",
                "(",
                ")",
                ")",
                ";",
                "auto",
                "io_stream",
                "=",
                "Aws",
                "::",
                "MakeShared",
                "<",
                "Aws",
                "::",
                "StringStream",
                ">",
                "(",
                "kAllocationTag",
                ")",
                ";",
                "if",
                "(",
                "!",
                "request",
                ".",
                "audio_request",
                ".",
                "data",
                ".",
                "empty",
                "(",
                ")",
                ")",
                "{",
                "std",
                "::",
                "copy",
                "(",
                "request",
                ".",
                "audio_request",
                ".",
                "data",
                ".",
                "begin",
                "(",
                ")",
                ",",
                "request",
                ".",
                "audio_request",
                ".",
                "data",
                ".",
                "end",
                "(",
                ")",
                ",",
                "std",
                "::",
                "ostream_iterator",
                "<",
                "unsigned",
                "char",
                ">",
                "(",
                "*",
                "io_stream",
                ")",
                ")",
                ";",
                "}",
                "else",
                "{",
                "*",
                "io_stream",
                "<<",
                "request",
                ".",
                "text_request",
                ";",
                "}",
                "post_content_request",
                ".",
                "SetBody",
                "(",
                "io_stream",
                ")",
                ";",
                "AWS_LOGSTREAM_DEBUG",
                "(",
                "__func__",
                ",",
                "\"PostContentRequest \"",
                "<<",
                "post_content_request",
                ")",
                ";",
                "auto",
                "post_content_result",
                "=",
                "lex_runtime_client",
                "->",
                "PostContent",
                "(",
                "post_content_request",
                ")",
                ";",
                "bool",
                "is_valid",
                "=",
                "true",
                ";",
                "if",
                "(",
                "post_content_result",
                ".",
                "IsSuccess",
                "(",
                ")",
                ")",
                "{",
                "auto",
                "&",
                "result",
                "=",
                "post_content_result",
                ".",
                "GetResult",
                "(",
                ")",
                ";",
                "AWS_LOGSTREAM_DEBUG",
                "(",
                "__func__",
                ",",
                "\"PostContentResult succeeded: \"",
                "<<",
                "result",
                ".",
                "GetMessage",
                "(",
                ")",
                ")",
                ";",
                "// @todo: use response variable for errors.",
                "/* auto error_code = */",
                "CopyResult",
                "(",
                "result",
                ",",
                "response",
                ")",
                ";",
                "// if (error_code) {",
                "//    is_valid = false;",
                "// }",
                "}",
                "else",
                "{",
                "is_valid",
                "=",
                "false",
                ";",
                "AWS_LOGSTREAM_ERROR",
                "(",
                "__func__",
                ",",
                "\"PostContentResult failed: \"",
                "<<",
                "post_content_result",
                ".",
                "GetError",
                "(",
                ")",
                ".",
                "GetMessage",
                "(",
                ")",
                ")",
                ";",
                "}",
                "return",
                "is_valid",
                ";",
                "}",
                "LexNode",
                "BuildLexNode",
                "(",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Client",
                "::",
                "ParameterReaderInterface",
                ">",
                "params",
                ")",
                "{",
                "LexNode",
                "lex_node",
                ";",
                "if",
                "(",
                "nullptr",
                "==",
                "params",
                ")",
                "{",
                "params",
                "=",
                "std",
                "::",
                "make_shared",
                "<",
                "Client",
                "::",
                "Ros1NodeParameterReader",
                ">",
                "(",
                ")",
                ";",
                "}",
                "auto",
                "lex_configuration",
                "=",
                "LoadLexParameters",
                "(",
                "*",
                "params",
                ")",
                ";",
                "Client",
                "::",
                "ClientConfigurationProvider",
                "configuration_provider",
                "(",
                "params",
                ")",
                ";",
                "auto",
                "lex_runtime_client",
                "=",
                "Aws",
                "::",
                "MakeShared",
                "<",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "(",
                "kAllocationTag",
                ",",
                "configuration_provider",
                ".",
                "GetClientConfiguration",
                "(",
                ")",
                ")",
                ";",
                "lex_node",
                ".",
                "ConfigureAwsLex",
                "(",
                "lex_configuration",
                ",",
                "lex_runtime_client",
                ")",
                ";",
                "lex_node",
                ".",
                "Init",
                "(",
                ")",
                ";",
                "return",
                "lex_node",
                ";",
                "}",
                "LexNode",
                "::",
                "LexNode",
                "(",
                ")",
                ":",
                "node_handle_",
                "(",
                "\"~\"",
                ")",
                "{",
                "}",
                "void",
                "LexNode",
                "::",
                "Init",
                "(",
                ")",
                "{",
                "lex_server_",
                "=",
                "node_handle_",
                ".",
                "advertiseService",
                "<",
                ">",
                "(",
                "\"lex_conversation\"",
                ",",
                "&",
                "LexNode",
                "::",
                "LexServerCallback",
                ",",
                "this",
                ")",
                ";",
                "}",
                "void",
                "LexNode",
                "::",
                "ConfigureAwsLex",
                "(",
                "LexConfiguration",
                "&",
                "lex_configuration",
                ",",
                "std",
                "::",
                "shared_ptr",
                "<",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "LexRuntimeServiceClient",
                ">",
                "lex_runtime_client",
                ")",
                "{",
                "lex_configuration_",
                "=",
                "lex_configuration",
                ";",
                "lex_runtime_client_",
                "=",
                "lex_runtime_client",
                ";",
                "}",
                "bool",
                "LexNode",
                "::",
                "LexServerCallback",
                "(",
                "lex_common_msgs",
                "::",
                "AudioTextConversationRequest",
                "&",
                "request",
                ",",
                "lex_common_msgs",
                "::",
                "AudioTextConversationResponse",
                "&",
                "response",
                ")",
                "{",
                "if",
                "(",
                "!",
                "lex_runtime_client_",
                ")",
                "{",
                "// @todo define a new exception",
                "AWS_LOG_WARN",
                "(",
                "__func__",
                ",",
                "\"Lex runtime client is not initialized, LoadConfiguration.\"",
                ")",
                ";",
                "throw",
                "std",
                "::",
                "invalid_argument",
                "(",
                "\"Lex runtime client is not initialized, LoadConfiguration.\"",
                ")",
                ";",
                "}",
                "return",
                "PostContent",
                "(",
                "request",
                ",",
                "response",
                ",",
                "lex_configuration_",
                ",",
                "lex_runtime_client_",
                ")",
                ";",
                "}",
                "}"
            ],
            "name": "Lex",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 204,
            "line_tokens": [],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 88,
            "token_start_col": 5,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversation.h",
            "kind": "NAMESPACE",
            "line": 200,
            "line_tokens": [
                "lex_common_msgs"
            ],
            "name": "lex_common_msgs",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 48,
            "token_start_col": 33,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversation.h",
            "kind": "NAMESPACE",
            "line": 199,
            "line_tokens": [
                "lex_common_msgs"
            ],
            "name": "lex_common_msgs",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 48,
            "token_start_col": 33,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 193,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 22,
            "token_start_col": 19,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 176,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 48,
            "token_start_col": 45,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 176,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 32,
            "token_start_col": 29,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 162,
            "line_tokens": [],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 93,
            "token_start_col": 5,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 154,
            "line_tokens": [],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 90,
            "token_start_col": 5,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 149,
            "line_tokens": [],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 79,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 140,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 39,
            "token_start_col": 36,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 140,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 23,
            "token_start_col": 20,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 133,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 6,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversation.h",
            "kind": "NAMESPACE",
            "line": 129,
            "line_tokens": [
                "lex_common_msgs"
            ],
            "name": "lex_common_msgs",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 18,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversation.h",
            "kind": "NAMESPACE",
            "line": 128,
            "line_tokens": [
                "lex_common_msgs"
            ],
            "name": "lex_common_msgs",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 18,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 112,
            "line_tokens": [],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 5,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversation.h",
            "kind": "NAMESPACE",
            "line": 104,
            "line_tokens": [
                "lex_common_msgs"
            ],
            "name": "lex_common_msgs",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 49,
            "token_start_col": 34,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 101,
            "line_tokens": [],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 64,
            "token_start_col": 5,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 99,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 23,
            "token_start_col": 20,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 97,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 6,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 96,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 30,
            "token_start_col": 27,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 93,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 12,
            "token_start_col": 9,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 82,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 12,
            "token_start_col": 9,
            "var_type": ""
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversation.h",
            "kind": "NAMESPACE",
            "line": 80,
            "line_tokens": [
                "lex_common_msgs"
            ],
            "name": "lex_common_msgs",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 31,
            "token_start_col": 16,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 79,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 19,
            "token_start_col": 16,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 61,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 12,
            "token_start_col": 9,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 60,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 12,
            "token_start_col": 9,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 55,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 36,
            "token_start_col": 33,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "NAMESPACE",
            "line": 40,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 36,
            "token_start_col": 33,
            "var_type": ""
        },
        {
            "declaration_filepath": "include/lex_node/lex_param_helper.h",
            "kind": "NAMESPACE",
            "line": 19,
            "line_tokens": [
                "Aws"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 10,
            "token_start_col": 7,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "NAMESPACE",
            "line": 22,
            "line_tokens": [
                "namespace",
                "Aws",
                "{",
                "namespace",
                "Lex",
                "{",
                "LexConfiguration",
                "LoadLexParameters",
                "(",
                "const",
                "Client",
                "::",
                "ParameterReaderInterface",
                "&",
                "parameter_interface",
                ")",
                "{",
                "LexConfiguration",
                "lex_configuration",
                ";",
                "bool",
                "is_invalid",
                "=",
                "false",
                ";",
                "is_invalid",
                "|=",
                "static_cast",
                "<",
                "bool",
                ">",
                "(",
                "parameter_interface",
                ".",
                "ReadParam",
                "(",
                "ParameterPath",
                "(",
                "kBotAliasKey",
                ")",
                ",",
                "lex_configuration",
                ".",
                "bot_alias",
                ")",
                ")",
                ";",
                "is_invalid",
                "|=",
                "static_cast",
                "<",
                "bool",
                ">",
                "(",
                "parameter_interface",
                ".",
                "ReadParam",
                "(",
                "ParameterPath",
                "(",
                "kBotNameKey",
                ")",
                ",",
                "lex_configuration",
                ".",
                "bot_name",
                ")",
                ")",
                ";",
                "is_invalid",
                "|=",
                "static_cast",
                "<",
                "bool",
                ">",
                "(",
                "parameter_interface",
                ".",
                "ReadParam",
                "(",
                "ParameterPath",
                "(",
                "kUserIdKey",
                ")",
                ",",
                "lex_configuration",
                ".",
                "user_id",
                ")",
                ")",
                ";",
                "if",
                "(",
                "is_invalid",
                ")",
                "{",
                "AWS_LOG_INFO",
                "(",
                "__func__",
                ",",
                "\"Lex configuration not fully specified\"",
                ")",
                ";",
                "throw",
                "std",
                "::",
                "invalid_argument",
                "(",
                "\"Lex configuration not fully specified\"",
                ")",
                ";",
                "}",
                "return",
                "lex_configuration",
                ";",
                "}",
                "}",
                "// namespace Lex",
                "}"
            ],
            "name": "Aws",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "NAMESPACE",
            "line": 23,
            "line_tokens": [
                "namespace",
                "Lex",
                "{",
                "LexConfiguration",
                "LoadLexParameters",
                "(",
                "const",
                "Client",
                "::",
                "ParameterReaderInterface",
                "&",
                "parameter_interface",
                ")",
                "{",
                "LexConfiguration",
                "lex_configuration",
                ";",
                "bool",
                "is_invalid",
                "=",
                "false",
                ";",
                "is_invalid",
                "|=",
                "static_cast",
                "<",
                "bool",
                ">",
                "(",
                "parameter_interface",
                ".",
                "ReadParam",
                "(",
                "ParameterPath",
                "(",
                "kBotAliasKey",
                ")",
                ",",
                "lex_configuration",
                ".",
                "bot_alias",
                ")",
                ")",
                ";",
                "is_invalid",
                "|=",
                "static_cast",
                "<",
                "bool",
                ">",
                "(",
                "parameter_interface",
                ".",
                "ReadParam",
                "(",
                "ParameterPath",
                "(",
                "kBotNameKey",
                ")",
                ",",
                "lex_configuration",
                ".",
                "bot_name",
                ")",
                ")",
                ";",
                "is_invalid",
                "|=",
                "static_cast",
                "<",
                "bool",
                ">",
                "(",
                "parameter_interface",
                ".",
                "ReadParam",
                "(",
                "ParameterPath",
                "(",
                "kUserIdKey",
                ")",
                ",",
                "lex_configuration",
                ".",
                "user_id",
                ")",
                ")",
                ";",
                "if",
                "(",
                "is_invalid",
                ")",
                "{",
                "AWS_LOG_INFO",
                "(",
                "__func__",
                ",",
                "\"Lex configuration not fully specified\"",
                ")",
                ";",
                "throw",
                "std",
                "::",
                "invalid_argument",
                "(",
                "\"Lex configuration not fully specified\"",
                ")",
                ";",
                "}",
                "return",
                "lex_configuration",
                ";",
                "}",
                "}"
            ],
            "name": "Lex",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "NAMESPACE",
            "line": 33,
            "line_tokens": [],
            "name": "Aws",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 68,
            "token_start_col": 5,
            "var_type": ""
        }
    ],
    "OVERLOADED_DECL_REF": [
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "OVERLOADED_DECL_REF",
            "line": 93,
            "line_tokens": [
                "GetNameForDialogState"
            ],
            "name": "GetNameForDialogState",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 59,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "OVERLOADED_DECL_REF",
            "line": 82,
            "line_tokens": [
                "GetNameForMessageFormatType"
            ],
            "name": "GetNameForMessageFormatType",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 92,
            "token_start_col": 65,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "OVERLOADED_DECL_REF",
            "line": 61,
            "line_tokens": [
                "GetNameForMessageFormatType"
            ],
            "name": "GetNameForMessageFormatType",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 92,
            "token_start_col": 65,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "OVERLOADED_DECL_REF",
            "line": 60,
            "line_tokens": [
                "GetNameForDialogState"
            ],
            "name": "GetNameForDialogState",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 59,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "OVERLOADED_DECL_REF",
            "line": 19,
            "line_tokens": [
                "ParameterPath"
            ],
            "name": "ParameterPath",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 33,
            "token_start_col": 20,
            "var_type": ""
        }
    ],
    "STRING_LITERAL": [
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 31,
            "line_tokens": [
                "\"lex_configuration/\"",
                "constexpr",
                "char",
                "kUserIdKey",
                "[",
                "]",
                "=",
                "LEX_CONFIGURATION_PATH",
                "\"user_id\"",
                ";",
                "constexpr",
                "char",
                "kBotNameKey",
                "[",
                "]",
                "=",
                "LEX_CONFIGURATION_PATH",
                "\"bot_name\"",
                ";",
                "constexpr",
                "char",
                "kBotAliasKey",
                "[",
                "]",
                "=",
                "LEX_CONFIGURATION_PATH",
                "\"bot_alias\""
            ],
            "name": "\"lex_configuration/bot_alias\"",
            "src_file_path": "include/lex_node/lex_configuration.h",
            "token_end_col": 67,
            "token_start_col": 33,
            "var_type": "const char [28]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 30,
            "line_tokens": [
                "\"lex_configuration/\"",
                "constexpr",
                "char",
                "kUserIdKey",
                "[",
                "]",
                "=",
                "LEX_CONFIGURATION_PATH",
                "\"user_id\"",
                ";",
                "constexpr",
                "char",
                "kBotNameKey",
                "[",
                "]",
                "=",
                "LEX_CONFIGURATION_PATH",
                "\"bot_name\""
            ],
            "name": "\"lex_configuration/bot_name\"",
            "src_file_path": "include/lex_node/lex_configuration.h",
            "token_end_col": 65,
            "token_start_col": 32,
            "var_type": "const char [27]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 29,
            "line_tokens": [
                "\"lex_configuration/\"",
                "constexpr",
                "char",
                "kUserIdKey",
                "[",
                "]",
                "=",
                "LEX_CONFIGURATION_PATH",
                "\"user_id\""
            ],
            "name": "\"lex_configuration/user_id\"",
            "src_file_path": "include/lex_node/lex_configuration.h",
            "token_end_col": 63,
            "token_start_col": 31,
            "var_type": "const char [26]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 32,
            "line_tokens": [
                "\"lex\""
            ],
            "name": "\"lex\"",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 43,
            "token_start_col": 38,
            "var_type": "const char [4]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 48,
            "line_tokens": [
                "\"Shutting down Lex Node...\""
            ],
            "name": "\"Shutting down Lex Node...\"",
            "src_file_path": "src/main.cpp",
            "token_end_col": 3,
            "token_start_col": 3,
            "var_type": "const char [26]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 48,
            "line_tokens": [
                "__func__"
            ],
            "name": "\"main\"",
            "src_file_path": "src/main.cpp",
            "token_end_col": 3,
            "token_start_col": 3,
            "var_type": "const char [5]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 43,
            "line_tokens": [
                "\"Starting Lex Node...\""
            ],
            "name": "\"Starting Lex Node...\"",
            "src_file_path": "src/main.cpp",
            "token_end_col": 3,
            "token_start_col": 3,
            "var_type": "const char [21]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 43,
            "line_tokens": [
                "__func__"
            ],
            "name": "\"main\"",
            "src_file_path": "src/main.cpp",
            "token_end_col": 3,
            "token_start_col": 3,
            "var_type": "const char [5]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 38,
            "line_tokens": [
                "\"lex_node\""
            ],
            "name": "\"lex_node\"",
            "src_file_path": "src/main.cpp",
            "token_end_col": 66,
            "token_start_col": 56,
            "var_type": "const char [9]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 33,
            "line_tokens": [
                "\"lex_node\""
            ],
            "name": "\"lex_node\"",
            "src_file_path": "src/main.cpp",
            "token_end_col": 35,
            "token_start_col": 25,
            "var_type": "const char [9]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 205,
            "line_tokens": [
                "\"Lex runtime client is not initialized, LoadConfiguration.\""
            ],
            "name": "\"Lex runtime client is not initialized, LoadConfiguration.\"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 92,
            "token_start_col": 33,
            "var_type": "const char [58]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 204,
            "line_tokens": [
                "\"Lex runtime client is not initialized, LoadConfiguration.\""
            ],
            "name": "\"Lex runtime client is not initialized, LoadConfiguration.\"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const char [58]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 204,
            "line_tokens": [
                "__func__"
            ],
            "name": "\"LexServerCallback\"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const char [18]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 188,
            "line_tokens": [
                "\"lex_conversation\""
            ],
            "name": "\"lex_conversation\"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 55,
            "token_start_col": 37,
            "var_type": "const char [17]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 183,
            "line_tokens": [
                "\"~\""
            ],
            "name": "\"~\"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 38,
            "token_start_col": 35,
            "var_type": "const char [2]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 162,
            "line_tokens": [
                "__func__"
            ],
            "name": "\"PostContent\"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const char [12]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 162,
            "line_tokens": [
                "\"PostContentResult failed: \""
            ],
            "name": "\"PostContentResult failed: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const char [27]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 154,
            "line_tokens": [
                "__func__"
            ],
            "name": "\"PostContent\"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const char [12]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 154,
            "line_tokens": [
                "\"PostContentResult succeeded: \""
            ],
            "name": "\"PostContentResult succeeded: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const char [30]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 149,
            "line_tokens": [
                "__func__"
            ],
            "name": "\"PostContent\"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 3,
            "token_start_col": 3,
            "var_type": "const char [12]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 149,
            "line_tokens": [
                "\"PostContentRequest \""
            ],
            "name": "\"PostContentRequest \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 3,
            "token_start_col": 3,
            "var_type": "const char [20]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 112,
            "line_tokens": [
                "__func__"
            ],
            "name": "\"CopyResult\"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const char [11]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 112,
            "line_tokens": [
                "\"Unable to parse slot string \""
            ],
            "name": "\"Unable to parse slot string \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const char [29]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 101,
            "line_tokens": [
                "__func__"
            ],
            "name": "\"CopyResult\"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const char [11]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 101,
            "line_tokens": [
                "\"slot_json: \""
            ],
            "name": "\"slot_json: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const char [12]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 68,
            "line_tokens": [
                "\"Intent Name: \""
            ],
            "name": "\"Intent Name: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 24,
            "token_start_col": 9,
            "var_type": "const char [14]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 67,
            "line_tokens": [
                "\"Content Type: \""
            ],
            "name": "\"Content Type: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 25,
            "token_start_col": 9,
            "var_type": "const char [15]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 66,
            "line_tokens": [
                "\"Session Attributes: \""
            ],
            "name": "\"Session Attributes: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 31,
            "token_start_col": 9,
            "var_type": "const char [21]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 65,
            "line_tokens": [
                "\"Slots: \""
            ],
            "name": "\"Slots: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 18,
            "token_start_col": 9,
            "var_type": "const char [8]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 63,
            "line_tokens": [
                "\"Message format type: \""
            ],
            "name": "\"Message format type: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 32,
            "token_start_col": 9,
            "var_type": "const char [22]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 62,
            "line_tokens": [
                "\"Dialog State: \""
            ],
            "name": "\"Dialog State: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 25,
            "token_start_col": 9,
            "var_type": "const char [15]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 59,
            "line_tokens": [
                "\"Slot to elicit: \""
            ],
            "name": "\"Slot to elicit: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 27,
            "token_start_col": 9,
            "var_type": "const char [17]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 58,
            "line_tokens": [
                "\"Message: \""
            ],
            "name": "\"Message: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 20,
            "token_start_col": 9,
            "var_type": "const char [10]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 57,
            "line_tokens": [
                "\"PostContentResult: \""
            ],
            "name": "\"PostContentResult: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 30,
            "token_start_col": 9,
            "var_type": "const char [20]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 50,
            "line_tokens": [
                "\"Content Type: \""
            ],
            "name": "\"Content Type: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 25,
            "token_start_col": 9,
            "var_type": "const char [15]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 49,
            "line_tokens": [
                "\"Accept Type: \""
            ],
            "name": "\"Accept Type: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 24,
            "token_start_col": 9,
            "var_type": "const char [14]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 48,
            "line_tokens": [
                "\"User Id: \""
            ],
            "name": "\"User Id: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 20,
            "token_start_col": 9,
            "var_type": "const char [10]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 47,
            "line_tokens": [
                "\"Input data: \""
            ],
            "name": "\"Input data: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 23,
            "token_start_col": 9,
            "var_type": "const char [13]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 44,
            "line_tokens": [
                "\"Bot Name : \""
            ],
            "name": "\"Bot Name : \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 22,
            "token_start_col": 9,
            "var_type": "const char [12]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 43,
            "line_tokens": [
                "\"Bot Alias: \""
            ],
            "name": "\"Bot Alias: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 22,
            "token_start_col": 9,
            "var_type": "const char [12]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 42,
            "line_tokens": [
                "\"Request: \""
            ],
            "name": "\"Request: \"",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 20,
            "token_start_col": 9,
            "var_type": "const char [10]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 34,
            "line_tokens": [
                "\"Lex configuration not fully specified\""
            ],
            "name": "\"Lex configuration not fully specified\"",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 72,
            "token_start_col": 33,
            "var_type": "const char [38]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 33,
            "line_tokens": [
                "\"Lex configuration not fully specified\""
            ],
            "name": "\"Lex configuration not fully specified\"",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const char [38]"
        },
        {
            "declaration_filepath": "",
            "kind": "STRING_LITERAL",
            "line": 33,
            "line_tokens": [
                "__func__"
            ],
            "name": "\"LoadLexParameters\"",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const char [18]"
        }
    ],
    "STRUCT_DECL": [
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "STRUCT_DECL",
            "line": 37,
            "line_tokens": [
                "struct",
                "LexConfiguration",
                "{",
                "/**\n   * The user id to call lex with. Unique per caller.\n   */",
                "std",
                "::",
                "string",
                "user_id",
                ";",
                "/**\n   * The lex bot to use.\n   */",
                "std",
                "::",
                "string",
                "bot_name",
                ";",
                "/**\n   * The lex alias of the bot to use.\n   */",
                "std",
                "::",
                "string",
                "bot_alias",
                ";",
                "}"
            ],
            "name": "LexConfiguration",
            "src_file_path": "include/lex_node/lex_configuration.h",
            "token_end_col": 2,
            "token_start_col": 1,
            "var_type": "Aws::Lex::LexConfiguration"
        }
    ],
    "TYPECAST_OPERATOR": [
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "TYPECAST_OPERATOR",
            "line": 128,
            "line_tokens": [
                "explicit",
                "operator",
                "ros",
                "::",
                "NodeHandle",
                "&",
                "(",
                ")",
                "{",
                "return",
                "node_handle_",
                ";",
                "}"
            ],
            "name": "operator ros::NodeHandle &",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 65,
            "token_start_col": 3,
            "var_type": "ros::NodeHandle &()"
        }
    ],
    "TYPE_REF": [
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "TYPE_REF",
            "line": 29,
            "line_tokens": [
                "LexConfiguration"
            ],
            "name": "struct Aws::Lex::LexConfiguration",
            "src_file_path": "include/lex_node/lex_param_helper.h",
            "token_end_col": 17,
            "token_start_col": 1,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/node_handle.h",
            "kind": "TYPE_REF",
            "line": 128,
            "line_tokens": [
                "NodeHandle"
            ],
            "name": "class ros::NodeHandle",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 36,
            "token_start_col": 26,
            "var_type": "ros::NodeHandle"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "TYPE_REF",
            "line": 110,
            "line_tokens": [
                "LexConfiguration"
            ],
            "name": "struct Aws::Lex::LexConfiguration",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 21,
            "token_start_col": 5,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationResponse.h",
            "kind": "TYPE_REF",
            "line": 101,
            "line_tokens": [
                "AudioTextConversationResponse"
            ],
            "name": "lex_common_msgs::AudioTextConversationResponse",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 72,
            "token_start_col": 43,
            "var_type": "lex_common_msgs::AudioTextConversationResponse"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationRequest.h",
            "kind": "TYPE_REF",
            "line": 100,
            "line_tokens": [
                "AudioTextConversationRequest"
            ],
            "name": "lex_common_msgs::AudioTextConversationRequest",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 71,
            "token_start_col": 43,
            "var_type": "lex_common_msgs::AudioTextConversationRequest"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/node_handle.h",
            "kind": "TYPE_REF",
            "line": 69,
            "line_tokens": [
                "NodeHandle"
            ],
            "name": "class ros::NodeHandle",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 18,
            "token_start_col": 8,
            "var_type": "ros::NodeHandle"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "TYPE_REF",
            "line": 59,
            "line_tokens": [
                "LexConfiguration"
            ],
            "name": "struct Aws::Lex::LexConfiguration",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 19,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/service_server.h",
            "kind": "TYPE_REF",
            "line": 54,
            "line_tokens": [
                "ServiceServer"
            ],
            "name": "class ros::ServiceServer",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 21,
            "token_start_col": 8,
            "var_type": "ros::ServiceServer"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "TYPE_REF",
            "line": 41,
            "line_tokens": [
                "LexNode"
            ],
            "name": "class Aws::Lex::LexNode",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 8,
            "token_start_col": 1,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/aws_ros1_common/sdk_utils/logging/aws_ros_logger.h",
            "kind": "TYPE_REF",
            "line": 38,
            "line_tokens": [
                "AWSROSLogger"
            ],
            "name": "class Aws::Utils::Logging::AWSROSLogger",
            "src_file_path": "src/main.cpp",
            "token_end_col": 54,
            "token_start_col": 42,
            "var_type": "Aws::Utils::Logging::AWSROSLogger"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationResponse.h",
            "kind": "TYPE_REF",
            "line": 200,
            "line_tokens": [
                "AudioTextConversationResponse"
            ],
            "name": "lex_common_msgs::AudioTextConversationResponse",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 79,
            "token_start_col": 50,
            "var_type": "lex_common_msgs::AudioTextConversationResponse"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationRequest.h",
            "kind": "TYPE_REF",
            "line": 199,
            "line_tokens": [
                "AudioTextConversationRequest"
            ],
            "name": "lex_common_msgs::AudioTextConversationRequest",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 78,
            "token_start_col": 50,
            "var_type": "lex_common_msgs::AudioTextConversationRequest"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "TYPE_REF",
            "line": 199,
            "line_tokens": [
                "LexNode"
            ],
            "name": "class Aws::Lex::LexNode",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 13,
            "token_start_col": 6,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "TYPE_REF",
            "line": 192,
            "line_tokens": [
                "LexConfiguration"
            ],
            "name": "struct Aws::Lex::LexConfiguration",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 19,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "TYPE_REF",
            "line": 191,
            "line_tokens": [
                "LexNode"
            ],
            "name": "class Aws::Lex::LexNode",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 13,
            "token_start_col": 6,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "TYPE_REF",
            "line": 188,
            "line_tokens": [
                "LexNode"
            ],
            "name": "class Aws::Lex::LexNode",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 65,
            "token_start_col": 58,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "TYPE_REF",
            "line": 185,
            "line_tokens": [
                "LexNode"
            ],
            "name": "class Aws::Lex::LexNode",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 13,
            "token_start_col": 6,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "TYPE_REF",
            "line": 183,
            "line_tokens": [
                "LexNode"
            ],
            "name": "class Aws::Lex::LexNode",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 8,
            "token_start_col": 1,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/aws_ros1_common/sdk_utils/ros1_node_parameter_reader.h",
            "kind": "TYPE_REF",
            "line": 172,
            "line_tokens": [
                "Ros1NodeParameterReader"
            ],
            "name": "class Aws::Client::Ros1NodeParameterReader",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 62,
            "token_start_col": 39,
            "var_type": "Aws::Client::Ros1NodeParameterReader"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "TYPE_REF",
            "line": 170,
            "line_tokens": [
                "LexNode"
            ],
            "name": "class Aws::Lex::LexNode",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 10,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "TYPE_REF",
            "line": 168,
            "line_tokens": [
                "LexNode"
            ],
            "name": "class Aws::Lex::LexNode",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 8,
            "token_start_col": 1,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "TYPE_REF",
            "line": 130,
            "line_tokens": [
                "LexConfiguration"
            ],
            "name": "struct Aws::Lex::LexConfiguration",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 25,
            "token_start_col": 9,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationResponse.h",
            "kind": "TYPE_REF",
            "line": 129,
            "line_tokens": [
                "AudioTextConversationResponse"
            ],
            "name": "lex_common_msgs::AudioTextConversationResponse",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 49,
            "token_start_col": 20,
            "var_type": "lex_common_msgs::AudioTextConversationResponse"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationRequest.h",
            "kind": "TYPE_REF",
            "line": 128,
            "line_tokens": [
                "AudioTextConversationRequest"
            ],
            "name": "lex_common_msgs::AudioTextConversationRequest",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 48,
            "token_start_col": 20,
            "var_type": "lex_common_msgs::AudioTextConversationRequest"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/KeyValue.h",
            "kind": "TYPE_REF",
            "line": 104,
            "line_tokens": [
                "KeyValue"
            ],
            "name": "lex_common_msgs::KeyValue",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 59,
            "token_start_col": 51,
            "var_type": "lex_common_msgs::KeyValue"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationResponse.h",
            "kind": "TYPE_REF",
            "line": 80,
            "line_tokens": [
                "AudioTextConversationResponse"
            ],
            "name": "lex_common_msgs::AudioTextConversationResponse",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 62,
            "token_start_col": 33,
            "var_type": "lex_common_msgs::AudioTextConversationResponse"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "TYPE_REF",
            "line": 27,
            "line_tokens": [
                "LexConfiguration"
            ],
            "name": "struct Aws::Lex::LexConfiguration",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 19,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "TYPE_REF",
            "line": 25,
            "line_tokens": [
                "LexConfiguration"
            ],
            "name": "struct Aws::Lex::LexConfiguration",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 17,
            "token_start_col": 1,
            "var_type": "Aws::Lex::LexConfiguration"
        }
    ],
    "UNEXPOSED_EXPR": [
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/service_server.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 90,
            "line_tokens": [
                "lex_server_"
            ],
            "name": "operator void *",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 77,
            "token_start_col": 66,
            "var_type": "void *"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 90,
            "line_tokens": [
                "lex_server_"
            ],
            "name": "lex_server_",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 77,
            "token_start_col": 66,
            "var_type": "const ros::ServiceServer"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 50,
            "line_tokens": [
                "options"
            ],
            "name": "options",
            "src_file_path": "src/main.cpp",
            "token_end_col": 27,
            "token_start_col": 20,
            "var_type": "const Aws::SDKOptions"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 48,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/main.cpp",
            "token_end_col": 54,
            "token_start_col": 3,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 48,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/main.cpp",
            "token_end_col": 54,
            "token_start_col": 3,
            "var_type": "const Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 48,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/main.cpp",
            "token_end_col": 54,
            "token_start_col": 3,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/init.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 46,
            "line_tokens": [
                "ros",
                "::",
                "spin"
            ],
            "name": "spin",
            "src_file_path": "src/main.cpp",
            "token_end_col": 12,
            "token_start_col": 3,
            "var_type": "void (*)()"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 43,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/main.cpp",
            "token_end_col": 49,
            "token_start_col": 3,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 43,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/main.cpp",
            "token_end_col": 49,
            "token_start_col": 3,
            "var_type": "const Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 43,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/main.cpp",
            "token_end_col": 49,
            "token_start_col": 3,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 40,
            "line_tokens": [
                "options"
            ],
            "name": "options",
            "src_file_path": "src/main.cpp",
            "token_end_col": 23,
            "token_start_col": 16,
            "var_type": "const Aws::SDKOptions"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 35,
            "line_tokens": [
                "Aws",
                "::",
                "Lex",
                "::",
                "BuildLexNode"
            ],
            "name": "BuildLexNode",
            "src_file_path": "src/main.cpp",
            "token_end_col": 41,
            "token_start_col": 19,
            "var_type": "Aws::Lex::LexNode (*)(std::shared_ptr<Client::ParameterReaderInterface>)"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 33,
            "line_tokens": [
                "argv"
            ],
            "name": "argv",
            "src_file_path": "src/main.cpp",
            "token_end_col": 23,
            "token_start_col": 19,
            "var_type": "char *[]"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/init.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 33,
            "line_tokens": [
                "ros",
                "::",
                "init"
            ],
            "name": "init",
            "src_file_path": "src/main.cpp",
            "token_end_col": 12,
            "token_start_col": 3,
            "var_type": "void (*)(int &, char **, const std::string &, uint32_t)"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 207,
            "line_tokens": [
                "lex_runtime_client_"
            ],
            "name": "lex_runtime_client_",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 61,
            "var_type": "const std::shared_ptr<Aws::LexRuntimeService::LexRuntimeServiceClient>"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 207,
            "line_tokens": [
                "lex_configuration_"
            ],
            "name": "lex_configuration_",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 59,
            "token_start_col": 41,
            "var_type": "const Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 207,
            "line_tokens": [
                "PostContent"
            ],
            "name": "PostContent",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 21,
            "token_start_col": 10,
            "var_type": "bool (*)(lex_common_msgs::AudioTextConversationRequest &, lex_common_msgs::AudioTextConversationResponse &, const Aws::Lex::LexConfiguration &, std::shared_ptr<const LexRuntimeService::LexRuntimeServiceClient>)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 204,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 88,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 204,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 88,
            "token_start_col": 5,
            "var_type": "const Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 204,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 88,
            "token_start_col": 5,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 202,
            "line_tokens": [
                "lex_runtime_client_"
            ],
            "name": "lex_runtime_client_",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 27,
            "token_start_col": 8,
            "var_type": "const std::__shared_ptr<Aws::LexRuntimeService::LexRuntimeServiceClient, __gnu_cxx::_S_atomic>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 196,
            "line_tokens": [
                "lex_runtime_client"
            ],
            "name": "lex_runtime_client",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 43,
            "token_start_col": 25,
            "var_type": "const std::shared_ptr<Aws::LexRuntimeService::LexRuntimeServiceClient>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 195,
            "line_tokens": [
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 41,
            "token_start_col": 24,
            "var_type": "const Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 195,
            "line_tokens": [
                "="
            ],
            "name": "operator=",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 23,
            "token_start_col": 22,
            "var_type": "Aws::Lex::LexConfiguration &(*)(const Aws::Lex::LexConfiguration &) noexcept(false)"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/ros/service_server.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 187,
            "line_tokens": [
                "="
            ],
            "name": "operator=",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 16,
            "token_start_col": 15,
            "var_type": "ros::ServiceServer &(*)(const ros::ServiceServer &) noexcept"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 180,
            "line_tokens": [
                "lex_node"
            ],
            "name": "lex_node",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 18,
            "token_start_col": 10,
            "var_type": "const Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 178,
            "line_tokens": [
                "lex_runtime_client"
            ],
            "name": "lex_runtime_client",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 65,
            "token_start_col": 47,
            "var_type": "const std::shared_ptr<Aws::LexRuntimeService::LexRuntimeServiceClient>"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 177,
            "line_tokens": [
                "kAllocationTag"
            ],
            "name": "kAllocationTag",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 19,
            "token_start_col": 5,
            "var_type": "const char *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 175,
            "line_tokens": [
                "params"
            ],
            "name": "params",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 68,
            "token_start_col": 62,
            "var_type": "const std::shared_ptr<Client::ParameterReaderInterface>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 174,
            "line_tokens": [
                "params"
            ],
            "name": "params",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 53,
            "token_start_col": 47,
            "var_type": "const std::__shared_ptr<Aws::Client::ParameterReaderInterface, __gnu_cxx::_S_atomic>"
        },
        {
            "declaration_filepath": "include/lex_node/lex_param_helper.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 174,
            "line_tokens": [
                "LoadLexParameters"
            ],
            "name": "LoadLexParameters",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 45,
            "token_start_col": 28,
            "var_type": "Aws::Lex::LexConfiguration (*)(const Client::ParameterReaderInterface &)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 171,
            "line_tokens": [
                "params"
            ],
            "name": "params",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 24,
            "token_start_col": 18,
            "var_type": "const std::shared_ptr<Client::ParameterReaderInterface>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 165,
            "line_tokens": [
                "is_valid"
            ],
            "name": "is_valid",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 18,
            "token_start_col": 10,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 162,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 93,
            "token_start_col": 5,
            "var_type": "const Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 162,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 93,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 162,
            "line_tokens": [
                "post_content_result"
            ],
            "name": "post_content_result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const Aws::Utils::Outcome<Aws::LexRuntimeService::Model::PostContentResult, Aws::Client::AWSError<Aws::LexRuntimeService::LexRuntimeServiceErrors> >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 162,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 93,
            "token_start_col": 5,
            "var_type": "basic_ostream<char, std::char_traits<char> >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 162,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 93,
            "token_start_col": 5,
            "var_type": "const Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 162,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 93,
            "token_start_col": 5,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 156,
            "line_tokens": [
                "CopyResult"
            ],
            "name": "CopyResult",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 39,
            "token_start_col": 29,
            "var_type": "int (*)(Aws::LexRuntimeService::Model::PostContentResult &, lex_common_msgs::AudioTextConversationResponse &)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 154,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 90,
            "token_start_col": 5,
            "var_type": "const Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 154,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 90,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 154,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 154,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 90,
            "token_start_col": 5,
            "var_type": "basic_ostream<char, std::char_traits<char> >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 154,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 90,
            "token_start_col": 5,
            "var_type": "const Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 154,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 90,
            "token_start_col": 5,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 152,
            "line_tokens": [
                "post_content_result"
            ],
            "name": "post_content_result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 26,
            "token_start_col": 7,
            "var_type": "const Aws::Utils::Outcome<Aws::LexRuntimeService::Model::PostContentResult, Aws::Client::AWSError<Aws::LexRuntimeService::LexRuntimeServiceErrors> >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 150,
            "line_tokens": [
                "post_content_request"
            ],
            "name": "post_content_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 82,
            "token_start_col": 62,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 150,
            "line_tokens": [
                "lex_runtime_client"
            ],
            "name": "lex_runtime_client",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 48,
            "token_start_col": 30,
            "var_type": "const std::__shared_ptr<const Aws::LexRuntimeService::LexRuntimeServiceClient, __gnu_cxx::_S_atomic>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 149,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 79,
            "token_start_col": 3,
            "var_type": "const Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 149,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 79,
            "token_start_col": 3,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 149,
            "line_tokens": [
                "post_content_request"
            ],
            "name": "post_content_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 3,
            "token_start_col": 3,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 149,
            "line_tokens": [
                "<<"
            ],
            "name": "operator<<",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 3,
            "token_start_col": 3,
            "var_type": "std::ostream &(*)(std::ostream &, const Aws::LexRuntimeService::Model::PostContentRequest &)"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 149,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 79,
            "token_start_col": 3,
            "var_type": "basic_ostream<char, std::char_traits<char> >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 149,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 79,
            "token_start_col": 3,
            "var_type": "const Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 149,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 79,
            "token_start_col": 3,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 148,
            "line_tokens": [
                "io_stream"
            ],
            "name": "io_stream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 41,
            "token_start_col": 32,
            "var_type": "const std::shared_ptr<std::__cxx11::basic_stringstream<char, std::char_traits<char>, Aws::Allocator<char> > >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 148,
            "line_tokens": [
                "post_content_request"
            ],
            "name": "post_content_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 23,
            "token_start_col": 3,
            "var_type": "Aws::AmazonStreamingWebServiceRequest"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationRequest.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 146,
            "line_tokens": [
                "request",
                ".",
                "text_request"
            ],
            "name": "text_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 39,
            "token_start_col": 19,
            "var_type": "const lex_common_msgs::AudioTextConversationRequest_<std::allocator<void> >::_text_request_type"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 146,
            "line_tokens": [
                "io_stream"
            ],
            "name": "io_stream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 15,
            "token_start_col": 6,
            "var_type": "const std::__shared_ptr<std::__cxx11::basic_stringstream<char, std::char_traits<char>, Aws::Allocator<char> >, __gnu_cxx::_S_atomic>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 144,
            "line_tokens": [
                "io_stream"
            ],
            "name": "io_stream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 62,
            "token_start_col": 53,
            "var_type": "const std::__shared_ptr<std::__cxx11::basic_stringstream<char, std::char_traits<char>, Aws::Allocator<char> >, __gnu_cxx::_S_atomic>"
        },
        {
            "declaration_filepath": "/opt/ros/kinetic/include/audio_common_msgs/AudioData.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 142,
            "line_tokens": [
                "request",
                ".",
                "audio_request",
                ".",
                "data"
            ],
            "name": "data",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 34,
            "token_start_col": 8,
            "var_type": "const std::vector<unsigned char, std::allocator<unsigned char> >"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 140,
            "line_tokens": [
                "kAllocationTag"
            ],
            "name": "kAllocationTag",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 69,
            "token_start_col": 55,
            "var_type": "const char *"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationRequest.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 139,
            "line_tokens": [
                "request",
                ".",
                "content_type"
            ],
            "name": "content_type",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 59,
            "token_start_col": 39,
            "var_type": "const std::__cxx11::basic_string<char>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 139,
            "line_tokens": [
                "post_content_request"
            ],
            "name": "post_content_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 23,
            "token_start_col": 3,
            "var_type": "Aws::AmazonStreamingWebServiceRequest"
        },
        {
            "declaration_filepath": "/opt/amanrja/Documents/ROS_2/upgraded_from_ros1/debug_lex_node/install/lex_common_msgs/include/lex_common_msgs/AudioTextConversationRequest.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 136,
            "line_tokens": [
                "request",
                ".",
                "accept_type"
            ],
            "name": "accept_type",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 36,
            "token_start_col": 17,
            "var_type": "const std::__cxx11::basic_string<char>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 112,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 5,
            "var_type": "const Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 112,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 112,
            "line_tokens": [
                "slot_string"
            ],
            "name": "slot_string",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const Aws::String"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 112,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 5,
            "var_type": "basic_ostream<char, std::char_traits<char> >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 112,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 5,
            "var_type": "const Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 112,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 5,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 108,
            "line_tokens": [
                "response_it"
            ],
            "name": "response_it",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 18,
            "token_start_col": 7,
            "var_type": "const __gnu_cxx::__normal_iterator<lex_common_msgs::KeyValue_<std::allocator<void> > *, std::vector<lex_common_msgs::KeyValue_<std::allocator<void> >, std::allocator<lex_common_msgs::KeyValue_<std::allocator<void> > > > >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 107,
            "line_tokens": [
                "response_it"
            ],
            "name": "response_it",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 18,
            "token_start_col": 7,
            "var_type": "const __gnu_cxx::__normal_iterator<lex_common_msgs::KeyValue_<std::allocator<void> > *, std::vector<lex_common_msgs::KeyValue_<std::allocator<void> >, std::allocator<lex_common_msgs::KeyValue_<std::allocator<void> > > > >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 106,
            "line_tokens": [
                ":"
            ],
            "name": "__begin3",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 26,
            "token_start_col": 25,
            "var_type": "const std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, Aws::Allocator<char> >, Aws::Utils::Json::JsonView> >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 104,
            "line_tokens": [
                "view"
            ],
            "name": "view",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 65,
            "token_start_col": 61,
            "var_type": "const std::map<std::__cxx11::basic_string<char, std::char_traits<char>, Aws::Allocator<char> >, Aws::Utils::Json::JsonView, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, Aws::Allocator<char> > >, Aws::Allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, Aws::Allocator<char> >, Aws::Utils::Json::JsonView> > >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 103,
            "line_tokens": [
                "slot_json"
            ],
            "name": "slot_json",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 26,
            "token_start_col": 17,
            "var_type": "const Aws::Utils::Json::JsonValue"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 101,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 64,
            "token_start_col": 5,
            "var_type": "const Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 101,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 64,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 101,
            "line_tokens": [
                "slot_string"
            ],
            "name": "slot_string",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 5,
            "var_type": "const Aws::String"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 101,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 64,
            "token_start_col": 5,
            "var_type": "basic_ostream<char, std::char_traits<char> >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 101,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 64,
            "token_start_col": 5,
            "var_type": "const Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 101,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 64,
            "token_start_col": 5,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 100,
            "line_tokens": [
                "slot_json"
            ],
            "name": "slot_json",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 16,
            "token_start_col": 7,
            "var_type": "const Aws::Utils::Json::JsonValue"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 99,
            "line_tokens": [
                "slot_string"
            ],
            "name": "slot_string",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 59,
            "token_start_col": 48,
            "var_type": "const Aws::String"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 98,
            "line_tokens": [
                "slot_byte_buffer"
            ],
            "name": "slot_byte_buffer",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 43,
            "token_start_col": 27,
            "var_type": "const Aws::Utils::Array<unsigned char>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 97,
            "line_tokens": [
                "slot_byte_buffer"
            ],
            "name": "slot_byte_buffer",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 68,
            "token_start_col": 52,
            "var_type": "const Aws::Utils::Array<unsigned char>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 96,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 72,
            "token_start_col": 66,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 95,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 42,
            "token_start_col": 36,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 94,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 55,
            "token_start_col": 49,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 92,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 32,
            "token_start_col": 26,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 90,
            "line_tokens": [
                "audio_size"
            ],
            "name": "audio_size",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 42,
            "token_start_col": 32,
            "var_type": "const std::fpos<__mbstate_t>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 87,
            "line_tokens": [
                "audio_size"
            ],
            "name": "audio_size",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 65,
            "token_start_col": 55,
            "var_type": "const std::fpos<__mbstate_t>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 84,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 34,
            "token_start_col": 28,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 83,
            "line_tokens": [
                "result"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 68,
            "token_start_col": 62,
            "var_type": "const Aws::LexRuntimeService::Model::PostContentResult"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 50,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 36,
            "token_start_col": 29,
            "var_type": "const Aws::AmazonStreamingWebServiceRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 47,
            "line_tokens": [
                "ss"
            ],
            "name": "ss",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 29,
            "token_start_col": 27,
            "var_type": "const std::__cxx11::basic_stringstream<char>"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 46,
            "line_tokens": [
                "request"
            ],
            "name": "request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 16,
            "token_start_col": 9,
            "var_type": "const Aws::AmazonStreamingWebServiceRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 46,
            "line_tokens": [
                "ss"
            ],
            "name": "ss",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 5,
            "token_start_col": 3,
            "var_type": "std::basic_ostream<char>"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 36,
            "line_tokens": [
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 27,
            "token_start_col": 10,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 33,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 68,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 33,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 68,
            "token_start_col": 5,
            "var_type": "const Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 33,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 68,
            "token_start_col": 5,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "UNEXPOSED_EXPR",
            "line": 32,
            "line_tokens": [
                "is_invalid"
            ],
            "name": "is_invalid",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 17,
            "token_start_col": 7,
            "var_type": "bool"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 31,
            "line_tokens": [
                "kUserIdKey"
            ],
            "name": "kUserIdKey",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 89,
            "token_start_col": 79,
            "var_type": "const char *"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 30,
            "line_tokens": [
                "kBotNameKey"
            ],
            "name": "kBotNameKey",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 90,
            "token_start_col": 79,
            "var_type": "const char *"
        },
        {
            "declaration_filepath": "include/lex_node/lex_configuration.h",
            "kind": "UNEXPOSED_EXPR",
            "line": 29,
            "line_tokens": [
                "kBotAliasKey"
            ],
            "name": "kBotAliasKey",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 91,
            "token_start_col": 79,
            "var_type": "const char *"
        }
    ],
    "USING_DECLARATION": [
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "USING_DECLARATION",
            "line": 93,
            "line_tokens": [
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "DialogStateMapper",
                "::",
                "GetNameForDialogState"
            ],
            "name": "GetNameForDialogState",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "USING_DECLARATION",
            "line": 82,
            "line_tokens": [
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "MessageFormatTypeMapper",
                "::",
                "GetNameForMessageFormatType"
            ],
            "name": "GetNameForMessageFormatType",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 92,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "USING_DECLARATION",
            "line": 61,
            "line_tokens": [
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "MessageFormatTypeMapper",
                "::",
                "GetNameForMessageFormatType"
            ],
            "name": "GetNameForMessageFormatType",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 92,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "USING_DECLARATION",
            "line": 60,
            "line_tokens": [
                "using",
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "DialogStateMapper",
                "::",
                "GetNameForDialogState"
            ],
            "name": "GetNameForDialogState",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 3,
            "var_type": ""
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "USING_DECLARATION",
            "line": 19,
            "line_tokens": [
                "using",
                "Aws",
                "::",
                "Client",
                "::",
                "ParameterPath"
            ],
            "name": "ParameterPath",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 33,
            "token_start_col": 1,
            "var_type": ""
        }
    ],
    "VARIABLE_TYPE": [
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "VARIABLE_TYPE",
            "line": 69,
            "line_tokens": [
                "ros",
                "::",
                "NodeHandle",
                "node_handle_"
            ],
            "name": "node_handle_",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 31,
            "token_start_col": 3,
            "var_type": "ros::NodeHandle"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "VARIABLE_TYPE",
            "line": 59,
            "line_tokens": [
                "LexConfiguration",
                "lex_configuration_"
            ],
            "name": "lex_configuration_",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 38,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "include/lex_node/lex_node.h",
            "kind": "VARIABLE_TYPE",
            "line": 54,
            "line_tokens": [
                "ros",
                "::",
                "ServiceServer",
                "lex_server_"
            ],
            "name": "lex_server_",
            "src_file_path": "include/lex_node/lex_node.h",
            "token_end_col": 33,
            "token_start_col": 3,
            "var_type": "ros::ServiceServer"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 48,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/main.cpp",
            "token_end_col": 54,
            "token_start_col": 3,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 43,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/main.cpp",
            "token_end_col": 49,
            "token_start_col": 3,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 39,
            "line_tokens": [
                "Aws",
                "::",
                "SDKOptions",
                "options"
            ],
            "name": "options",
            "src_file_path": "src/main.cpp",
            "token_end_col": 26,
            "token_start_col": 3,
            "var_type": "Aws::SDKOptions"
        },
        {
            "declaration_filepath": "src/main.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 35,
            "line_tokens": [
                "auto",
                "lex_node",
                "=",
                "Aws",
                "::",
                "Lex",
                "::",
                "BuildLexNode",
                "(",
                ")"
            ],
            "name": "lex_node",
            "src_file_path": "src/main.cpp",
            "token_end_col": 43,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 204,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 88,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 175,
            "line_tokens": [
                "Client",
                "::",
                "ClientConfigurationProvider",
                "configuration_provider",
                "(",
                "params",
                ")"
            ],
            "name": "configuration_provider",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 69,
            "token_start_col": 3,
            "var_type": "Client::ClientConfigurationProvider"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 174,
            "line_tokens": [
                "auto",
                "lex_configuration",
                "=",
                "LoadLexParameters",
                "(",
                "*",
                "params",
                ")"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 54,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexConfiguration"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 170,
            "line_tokens": [
                "LexNode",
                "lex_node"
            ],
            "name": "lex_node",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 19,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexNode"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 162,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 93,
            "token_start_col": 5,
            "var_type": "Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 162,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 93,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 154,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 90,
            "token_start_col": 5,
            "var_type": "Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 154,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 90,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 153,
            "line_tokens": [
                "auto",
                "&",
                "result",
                "=",
                "post_content_result",
                ".",
                "GetResult",
                "(",
                ")"
            ],
            "name": "result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 52,
            "token_start_col": 5,
            "var_type": "Aws::LexRuntimeService::Model::PostContentResult &"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 150,
            "line_tokens": [
                "auto",
                "post_content_result",
                "=",
                "lex_runtime_client",
                "->",
                "PostContent",
                "(",
                "post_content_request",
                ")"
            ],
            "name": "post_content_result",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 83,
            "token_start_col": 3,
            "var_type": "Aws::Utils::Outcome<Aws::LexRuntimeService::Model::PostContentResult, Aws::Client::AWSError<Aws::LexRuntimeService::LexRuntimeServiceErrors> >"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 149,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 79,
            "token_start_col": 3,
            "var_type": "Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 149,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 79,
            "token_start_col": 3,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 133,
            "line_tokens": [
                "Aws",
                "::",
                "LexRuntimeService",
                "::",
                "Model",
                "::",
                "PostContentRequest",
                "post_content_request"
            ],
            "name": "post_content_request",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 73,
            "token_start_col": 3,
            "var_type": "Aws::LexRuntimeService::Model::PostContentRequest"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 112,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 5,
            "var_type": "Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 112,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 80,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 101,
            "line_tokens": [],
            "name": "logStream",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 64,
            "token_start_col": 5,
            "var_type": "Aws::OStringStream"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 101,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 64,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 99,
            "line_tokens": [
                "auto",
                "slot_json",
                "=",
                "Aws",
                "::",
                "Utils",
                "::",
                "Json",
                "::",
                "JsonValue",
                "(",
                "slot_string",
                ")"
            ],
            "name": "slot_json",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 60,
            "token_start_col": 3,
            "var_type": "Aws::Utils::Json::JsonValue"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 97,
            "line_tokens": [
                "Aws",
                "::",
                "String",
                "slot_string",
                "(",
                "reinterpret_cast",
                "<",
                "char",
                "*",
                ">",
                "(",
                "slot_byte_buffer",
                ".",
                "GetUnderlyingData",
                "(",
                ")",
                ")",
                ",",
                "slot_byte_buffer",
                ".",
                "GetLength",
                "(",
                ")",
                ")"
            ],
            "name": "slot_string",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 56,
            "token_start_col": 3,
            "var_type": "Aws::String"
        },
        {
            "declaration_filepath": "src/lex_node.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 96,
            "line_tokens": [
                "auto",
                "slot_byte_buffer",
                "=",
                "Aws",
                "::",
                "Utils",
                "::",
                "HashingUtils",
                "::",
                "Base64Decode",
                "(",
                "result",
                ".",
                "GetSlots",
                "(",
                ")",
                ".",
                "c_str",
                "(",
                ")",
                ")"
            ],
            "name": "slot_byte_buffer",
            "src_file_path": "src/lex_node.cpp",
            "token_end_col": 92,
            "token_start_col": 3,
            "var_type": "Aws::Utils::Array<unsigned char>"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 33,
            "line_tokens": [],
            "name": "logSystem",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 68,
            "token_start_col": 5,
            "var_type": "Aws::Utils::Logging::LogSystemInterface *"
        },
        {
            "declaration_filepath": "src/lex_param_helper.cpp",
            "kind": "VARIABLE_TYPE",
            "line": 27,
            "line_tokens": [
                "LexConfiguration",
                "lex_configuration"
            ],
            "name": "lex_configuration",
            "src_file_path": "src/lex_param_helper.cpp",
            "token_end_col": 37,
            "token_start_col": 3,
            "var_type": "Aws::Lex::LexConfiguration"
        }
    ]
}